cp lib/Class/DBI/DATA/Schema.pm blib\lib\Class\DBI\DATA\Schema.pm
C:\strawberry\perl\bin\perl.exe "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib\lib', 'blib\arch')" t/*.t
-->
CREATE TABLE film (
	filmid INTEGER AUTO_INCREMENT PRIMARY KEY,
	title VARCHAR(255),
	rating VARCHAR(5)
);
    Parse::RecDescent: Treating "{ my ( $database_name, %tables, $table_order,
                       @table_comments, %views, $view_order, %procedures,
                       $proc_order ); my $delimiter = ';'; }" as an action
    Parse::RecDescent: Treating "#" as a comment
    Parse::RecDescent: Treating "# The "eofile" rule makes the parser fail if
                       any "statement" rule" as a comment
    Parse::RecDescent: Treating "# fails. Otherwise, the first successful
                       match by a "statement"" as a comment
    Parse::RecDescent: Treating "# won't cause the failure needed to know that
                       the parse, as a whole," as a comment
    Parse::RecDescent: Treating "# failed. -ky" as a comment
    Parse::RecDescent: Treating "#" as a comment
    Parse::RecDescent: Treating "startrule :" as a rule declaration
    Parse::RecDescent: Treating "statement(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "eofile" as a subrule match
    Parse::RecDescent: Treating "{ { database_name => $database_name, tables
                       => \%tables, views => \%views, procedures =>
                       \%procedures, } }" as an action
    Parse::RecDescent: Treating "eofile :" as a rule declaration
    Parse::RecDescent: Treating "/^\Z/" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement :" as a rule declaration
    Parse::RecDescent: Treating "comment" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "use" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "set" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "drop" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "create" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "alter" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "insert" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "delimiter" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "empty_statement" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "use :" as a rule declaration
    Parse::RecDescent: Treating "/use/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ $database_name = $item[2]; @table_comments
                       = (); }" as an action
    Parse::RecDescent: Treating "set :" as a rule declaration
    Parse::RecDescent: Treating "/set/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "drop :" as a rule declaration
    Parse::RecDescent: Treating "/drop/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "drop :" as a rule declaration
    Parse::RecDescent: Treating "/drop/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "bit:" as a rule declaration
    Parse::RecDescent: Treating "/(b'[01]{1,64}')/" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(b"[01]{1,64}")/" as a /../ pattern terminal
    Parse::RecDescent: Treating "string :" as a rule declaration
    Parse::RecDescent: Treating "# MySQL strings, unlike common SQL strings,
                       can be double-quoted or" as a comment
    Parse::RecDescent: Treating "# single-quoted, and you can escape the
                       delmiters by doubling (but only the" as a comment
    Parse::RecDescent: Treating "# delimiter) or by backslashing." as a
                       comment
    Parse::RecDescent: Treating "/'(\\.|''|[^\\\'])*'/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/"(\\.|""|[^\\\"])*"/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "# For reference, std sql str:
                       /(?:(?:\')(?:[^\']*(?:(?:\'\')[^\']*)*)(?:\'))//" as a
                       comment
    Parse::RecDescent: Treating "nonstring :" as a rule declaration
    Parse::RecDescent: Treating "/[^;\'"]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement_body :" as a rule declaration
    Parse::RecDescent: Treating "string" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "nonstring" as a subrule match
    Parse::RecDescent: Treating "insert :" as a rule declaration
    Parse::RecDescent: Treating "/insert/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement_body(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/delimiter/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/[\S]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $delimiter = $item[2] }" as an action
    Parse::RecDescent: Treating "empty_statement :" as a rule declaration
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "alter :" as a rule declaration
    Parse::RecDescent: Treating "ALTER" as a subrule match
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "alter_specification(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "alter_specification" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "alter_specification" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ my $table_name = $item{'table_name'}; die
                       "Cannot ALTER table '$table_name'; it does not exist"
                       unless $tables{ $table_name }; for my $definition ( @{
                       $item[4] } ) { $definition->{'extra'}->{'alter'} = 1;
                       push @{ $tables{ $table_name }{'constraints'} },
                       $definition; } }" as an action
    Parse::RecDescent: Treating "alter_specification :" as a rule declaration
    Parse::RecDescent: Treating "ADD" as a subrule match
    Parse::RecDescent: Treating "foreign_key_def" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "/database/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "TEMPORARY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "opt_if_not_exists(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "create_definition(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "create_definition" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "create_definition" as a subrule match
    Parse::RecDescent: Treating "/(,\s*)?\)/" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_option(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ my $table_name = $item{'table_name'}; die
                       "There is more than one definition for $table_name" if
                       ($tables{$table_name}); $tables{ $table_name }{'order'}
                       = ++$table_order; $tables{ $table_name }{'table_name'}
                       = $table_name; if ( @table_comments ) { $tables{
                       $table_name }{'comments'} = [ @table_comments ];
                       @table_comments = (); } my $i = 1; for my $definition (
                       @{ $item[7] } ) { if ( $definition->{'supertype'} eq
                       'field' ) { my $field_name = $definition->{'name'};
                       $tables{ $table_name }{'fields'}{ $field_name } = {
                       %$definition, order => $i }; $i++; if ( $definition-
                       >{'is_primary_key'} ) { push @{ $tables{ $table_name
                       }{'constraints'} }, { type => 'primary_key', fields =>
                       [ $field_name ], } ; } } elsif ( $definition-
                       >{'supertype'} eq 'constraint' ) { push @{ $tables{
                       $table_name }{'constraints'} }, $definition; } elsif (
                       $definition->{'supertype'} eq 'index' ) { push @{
                       $tables{ $table_name }{'indices'} }, $definition; } }
                       if ( my @options = @{ $item{'table_option(s?)'} } ) {
                       for my $option ( @options ) { my ( $key, $value ) =
                       each %$option; if ( $key eq 'comment' ) { push @{
                       $tables{ $table_name }{'comments'} }, $value; } else {
                       push @{ $tables{ $table_name }{'table_options'} },
                       $option; } } } 1; }" as an action
    Parse::RecDescent: Treating "opt_if_not_exists :" as a rule declaration
    Parse::RecDescent: Treating "/if not exists/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "UNIQUE(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "/(index|key)/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "index_name" as a subrule match
    Parse::RecDescent: Treating "/on/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "field_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); push @{ $tables{
                       $item{'table_name'} }{'indices'} }, { name => $item[4],
                       type => $item[2][0] ? 'unique' : 'normal', fields =>
                       $item[8], } ; }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "/trigger/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "PROCEDURE" as a subrule match
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); my $func_name =
                       $item[3]; my $owner = ''; my $sql = "$item[1] $item[2]
                       $item[3] $item[4]"; $procedures{ $func_name }{'order'}
                       = ++$proc_order; $procedures{ $func_name }{'name'} =
                       $func_name; $procedures{ $func_name }{'owner'} =
                       $owner; $procedures{ $func_name }{'sql'} = $sql; }" as
                       an action
    Parse::RecDescent: Treating "PROCEDURE :" as a rule declaration
    Parse::RecDescent: Treating "/procedure/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/function/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "or_replace(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "create_view_option(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "/view/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "/as/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_select_statement" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); my $view_name =
                       $item{'NAME'}; my $select_sql =
                       $item{'view_select_statement'}; my $options =
                       $item{'create_view_option(s?)'}; my $sql = join(q{ },
                       grep { defined and length } map { ref $_ eq 'ARRAY' ?
                       @$_ : $_ } $item{'CREATE'}, $item{'or_replace(?)'},
                       $options, $view_name, 'as select', join(', ', map {
                       sprintf('%s%s', $_->{'name'}, $_->{'alias'} ? ' as ' .
                       $_->{'alias'} : '' ) } @{ $select_sql->{'columns'} ||
                       [] } ), ' from ', join(', ', map { sprintf('%s%s', $_-
                       >{'name'}, $_->{'alias'} ? ' as ' . $_->{'alias'} : ''
                       ) } @{ $select_sql->{'from'}{'tables'} || [] } ),
                       $select_sql->{'from'}{'where'} ? 'where ' .
                       $select_sql->{'from'}{'where'} : '' , ); # Hack to
                       strip database from function calls in SQL $sql =~
                       s#`\w+`\.(`\w+`\()##g; $views{ $view_name }{'order'} =
                       ++$view_order; $views{ $view_name }{'name'} =
                       $view_name; $views{ $view_name }{'sql'} = $sql; $views{
                       $view_name }{'options'} = $options; $views{ $view_name
                       }{'select'} = $item{'view_select_statement'}; }" as an
                       action
    Parse::RecDescent: Treating "create_view_option :" as a rule declaration
    Parse::RecDescent: Treating "view_algorithm" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "view_sql_security" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "view_definer" as a subrule match
    Parse::RecDescent: Treating "or_replace :" as a rule declaration
    Parse::RecDescent: Treating "/or replace/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_algorithm :" as a rule declaration
    Parse::RecDescent: Treating "/algorithm/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/=/" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = "$item[1]=$item[3]"; }" as an
                       action
    Parse::RecDescent: Treating "view_definer :" as a rule declaration
    Parse::RecDescent: Treating "/definer=\S+/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_sql_security :" as a rule declaration
    Parse::RecDescent: Treating "/sql \s+ security \s+ (definer|invoker)/ixs"
                       as a /../ pattern terminal
    Parse::RecDescent: Treating "not_delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/.*?(?=$delimiter)/is" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "view_select_statement :" as a rule
                       declaration
    Parse::RecDescent: Treating "/[(]?/" as a /../ pattern terminal
    Parse::RecDescent: Treating "/select/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_column_def" as a subrule match
    Parse::RecDescent: Treating "/from/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_table_def" as a subrule match
    Parse::RecDescent: Treating "/[)]?/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = { columns =>
                       $item{'view_column_def'}, from =>
                       $item{'view_table_def'}, }; }" as an action
    Parse::RecDescent: Treating "view_column_def :" as a rule declaration
    Parse::RecDescent: Treating "/(.*?)(?=\bfrom\b)/ixs" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ # split on commas not in parens, # e.g.,
                       "concat_ws(\' \', first, last) as first_last" my @tmp =
                       $1 =~ /((?:[^(,]+|\(.*?\))+)/g; my @cols; for my $col (
                       @tmp ) { my ( $name, $alias ) = map { s/^\s+|\s+$//g;
                       s/[`]//g; $_ } split /\s+as\s+/i, $col; push @cols, {
                       name => $name, alias => $alias || '' }; } $return =
                       \@cols; }" as an action
    Parse::RecDescent: Treating "not_delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/.*?(?=$delimiter)/is" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "view_table_def :" as a rule declaration
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating "{ my $clause = $item[1]; my $where = $1 if
                       $clause =~ s/\bwhere \s+ (.*)//ixs; $clause =~
                       s/[)]\s*$//; my @tables; for my $tbl ( split(
                       /\s*,\s*/, $clause ) ) { my ( $name, $alias ) = split
                       /\s+as\s+/i, $tbl; push @tables, { name => $name, alias
                       => $alias || '' }; } $return = { tables => \@tables,
                       where => $where || '', }; }" as an action
    Parse::RecDescent: Treating "view_column_alias :" as a rule declaration
    Parse::RecDescent: Treating "/as/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "create_definition :" as a rule declaration
    Parse::RecDescent: Treating "constraint" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "field" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "comment" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "comment :" as a rule declaration
    Parse::RecDescent: Treating "/^\s*(?:#|-{2}).*\n/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ my $comment = $item[1]; $comment =~
                       s/^\s*(#|--)\s*//; $comment =~ s/\s*$//; $return =
                       $comment; }" as an action
    Parse::RecDescent: Treating "comment :" as a rule declaration
    Parse::RecDescent: Treating "m{ / \* (?! \!) .*? \* / }xs" as an m/../
                       pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[2]; $comment =
                       substr($comment, 0, -2); $comment =~ s/^\s*|\s*$//g;
                       $return = $comment; }" as an action
    Parse::RecDescent: Treating "comment_like_command :" as a rule declaration
    Parse::RecDescent: Treating "m{/\*!(\d+)?}s" as an m/../ pattern terminal
    Parse::RecDescent: Treating "comment_end :" as a rule declaration
    Parse::RecDescent: Treating "m{ \* / }xs" as an m/../ pattern terminal
    Parse::RecDescent: Treating "field_comment :" as a rule declaration
    Parse::RecDescent: Treating "/^\s*(?:#|-{2}).*\n/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ my $comment = $item[1]; $comment =~
                       s/^\s*(#|--)\s*//; $comment =~ s/\s*$//; $return =
                       $comment; }" as an action
    Parse::RecDescent: Treating "field_comment2 :" as a rule declaration
    Parse::RecDescent: Treating "/comment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[2]; $comment =~ s/^'//;
                       $comment =~ s/'$//; $return = $comment; }" as an action
    Parse::RecDescent: Treating "blank :" as a rule declaration
    Parse::RecDescent: Treating "/\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field :" as a rule declaration
    Parse::RecDescent: Treating "field_comment(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "data_type" as a subrule match
    Parse::RecDescent: Treating "field_qualifier(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "field_comment2(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "reference_definition(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "on_update(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "field_comment(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "{ my %qualifiers = map { %$_ } @{
                       $item{'field_qualifier(s?)'} || [] }; if ( my
                       @type_quals = @{ $item{'data_type'}{'qualifiers'} || []
                       } ) { $qualifiers{ $_ } = 1 for @type_quals; } my $null
                       = defined $qualifiers{'not_null'} ?
                       $qualifiers{'not_null'} : 1; delete
                       $qualifiers{'not_null'}; my @comments = ( @{ $item[1]
                       }, @{ $item[5] }, @{ $item[8] } ); $return = {
                       supertype => 'field', name => $item{'field_name'},
                       data_type => $item{'data_type'}{'type'}, size =>
                       $item{'data_type'}{'size'}, list =>
                       $item{'data_type'}{'list'}, null => $null, constraints
                       => $item{'reference_definition(?)'}, comments => [
                       @comments ], %qualifiers, } }" as an action
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "not_null" as a subrule match
    Parse::RecDescent: Treating "{ $return = { null => $item{'not_null'}, } }"
                       as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "default_val" as a subrule match
    Parse::RecDescent: Treating "{ $return = { default =>
                       $item{'default_val'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "auto_inc" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_auto_inc =>
                       $item{'auto_inc'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_primary_key =>
                       $item{'primary_key'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "unsigned" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_unsigned =>
                       $item{'unsigned'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/character set/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'CHARACTER SET' => $item[2], }
                       }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/collate/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { COLLATE => $item[2], } }" as an
                       action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'ON UPDATE' => $item[2], } }"
                       as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/unique/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "{ $return = { is_unique => 1, } }" as an
                       action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "KEY" as a subrule match
    Parse::RecDescent: Treating "{ $return = { has_index => 1, } }" as an
                       action
    Parse::RecDescent: Treating "reference_definition :" as a rule declaration
    Parse::RecDescent: Treating "/references/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "parens_field_list(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "match_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "on_delete(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "on_update(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "{ $return = { type => 'foreign_key',
                       reference_table => $item[2], reference_fields =>
                       $item[3][0], match_type => $item[4][0], on_delete =>
                       $item[5][0], on_update => $item[6][0], } }" as an
                       action
    Parse::RecDescent: Treating "match_type :" as a rule declaration
    Parse::RecDescent: Treating "/match full/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'full' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/match partial/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'partial' }" as an action
    Parse::RecDescent: Treating "on_delete :" as a rule declaration
    Parse::RecDescent: Treating "/on delete/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "reference_option" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "on_update :" as a rule declaration
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "reference_option" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "reference_option:" as a rule declaration
    Parse::RecDescent: Treating "/restrict/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/cascade/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/set null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/no action/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/set default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $item[1] }" as an action
    Parse::RecDescent: Treating "index :" as a rule declaration
    Parse::RecDescent: Treating "normal_index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "fulltext_index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "spatial_index" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "table_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "field_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "index_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "data_type :" as a rule declaration
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "parens_value_list(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "type_qualifier(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "{ my $type = $item[1]; my $size; # field
                       size, applicable only to non-set fields my $list; # set
                       list, applicable only to sets (duh) if ( uc($type) =~
                       /^(SET|ENUM)$/ ) { $size = undef; $list = $item[2][0];
                       } else { $size = $item[2][0]; $list = []; } $return = {
                       type => $type, size => $size, list => $list, qualifiers
                       => $item[3], } }" as an action
    Parse::RecDescent: Treating "parens_field_list :" as a rule declaration
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "field_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "parens_value_list :" as a rule declaration
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "VALUE(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "VALUE" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "VALUE" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "type_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/(BINARY|UNSIGNED|ZEROFILL)/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ lc $item[1] }" as an action
    Parse::RecDescent: Treating "field_type :" as a rule declaration
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "create_index :" as a rule declaration
    Parse::RecDescent: Treating "/create/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/index/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "not_null :" as a rule declaration
    Parse::RecDescent: Treating "/not/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 0 }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 1 }" as an action
    Parse::RecDescent: Treating "unsigned :" as a rule declaration
    Parse::RecDescent: Treating "/unsigned/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 0 }" as an action
    Parse::RecDescent: Treating "default_val :" as a rule declaration
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "string" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] =~ s/^\s*'|'\s*$//g or $item[2] =~
                       s/^\s*"|"\s*$//g; $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "bit" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] =~ s/b['"]([01]+)['"]/$1/g;
                       $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/[\w\d:.-]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "auto_inc :" as a rule declaration
    Parse::RecDescent: Treating "/auto_increment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 1 }" as an action
    Parse::RecDescent: Treating "primary_key :" as a rule declaration
    Parse::RecDescent: Treating "/primary/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 1 }" as an action
    Parse::RecDescent: Treating "constraint :" as a rule declaration
    Parse::RecDescent: Treating "primary_key_def" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "unique_key_def" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "foreign_key_def" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "foreign_key_def :" as a rule declaration
    Parse::RecDescent: Treating "foreign_key_def_begin" as a subrule match
    Parse::RecDescent: Treating "parens_field_list" as a subrule match
    Parse::RecDescent: Treating "reference_definition" as a subrule match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'foreign_key', name => $item[1], fields => $item[2],
                       %{ $item{'reference_definition'} }, } }" as an action
    Parse::RecDescent: Treating "foreign_key_def_begin :" as a rule
                       declaration
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[3] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = '' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = '' }" as an action
    Parse::RecDescent: Treating "primary_key_def :" as a rule declaration
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'primary_key', fields => $item[4], options =>
                       $item[2][0] || $item[6][0], }; }" as an action
    Parse::RecDescent: Treating "# In theory, and according to the doc, names
                       should not be allowed here, but" as a comment
    Parse::RecDescent: Treating "# MySQL accept (and ignores) them, so we are
                       not going to be less :)" as a comment
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'primary_key', fields => $item[4], options =>
                       $item[6][0], }; }" as an action
    Parse::RecDescent: Treating "unique_key_def :" as a rule declaration
    Parse::RecDescent: Treating "UNIQUE" as a subrule match
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', name
                       => $item[3][0], type => 'unique', fields => $item[6],
                       options => $item[4][0] || $item[8][0], } }" as an
                       action
    Parse::RecDescent: Treating "normal_index :" as a rule declaration
    Parse::RecDescent: Treating "KEY" as a subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'normal', name => $item[2][0], fields => $item[5],
                       options => $item[3][0] || $item[7][0], } }" as an
                       action
    Parse::RecDescent: Treating "index_name_not_using :" as a rule declaration
    Parse::RecDescent: Treating "QUOTED_NAME" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(\b(?!using)\w+\b)/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ $return = ($1 =~ /^using/i) ? undef : $1 }"
                       as an action
    Parse::RecDescent: Treating "index_type :" as a rule declaration
    Parse::RecDescent: Treating "/using (btree|hash|rtree)/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ $return = uc $1 }" as an action
    Parse::RecDescent: Treating "fulltext_index :" as a rule declaration
    Parse::RecDescent: Treating "/fulltext/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'fulltext', name => $item{'index_name(?)'}[0], fields
                       => $item[5], } }" as an action
    Parse::RecDescent: Treating "spatial_index :" as a rule declaration
    Parse::RecDescent: Treating "/spatial/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'spatial', name => $item{'index_name(?)'}[0], fields =>
                       $item[5], } }" as an action
    Parse::RecDescent: Treating "name_with_opt_paren :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "parens_value_list(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "{ $item[2][0] ? "$item[1]($item[2][0][0])" :
                       $item[1] }" as an action
    Parse::RecDescent: Treating "UNIQUE :" as a rule declaration
    Parse::RecDescent: Treating "/unique/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY :" as a rule declaration
    Parse::RecDescent: Treating "/key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/index/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_option :" as a rule declaration
    Parse::RecDescent: Treating "/comment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/=/" as a /../ pattern terminal
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[3]; $comment =~ s/^'//;
                       $comment =~ s/'$//; $return = { comment => $comment };
                       }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(default )?(charset|character set)/i" as a
                       /../ pattern terminal
    Parse::RecDescent: Treating "/\s*=?\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'CHARACTER SET' => $item[3] };
                       }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/collate/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'COLLATE' => $item[2] } }" as
                       an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/union/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/\s*=\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "table_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { $item[1] => $item[4] }; }" as
                       an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "/\s*=\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "MAYBE_QUOTED_WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { $item[1] => $item[3] }; }" as
                       an action
    Parse::RecDescent: Treating "MAYBE_QUOTED_WORD:" as a rule declaration
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/'(\w+)'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $1 }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/"(\w+)"/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $1 }" as an action
    Parse::RecDescent: Treating "default :" as a rule declaration
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "ADD :" as a rule declaration
    Parse::RecDescent: Treating "/add/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "ALTER :" as a rule declaration
    Parse::RecDescent: Treating "/alter/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CREATE :" as a rule declaration
    Parse::RecDescent: Treating "/create/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TEMPORARY :" as a rule declaration
    Parse::RecDescent: Treating "/temporary/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TABLE :" as a rule declaration
    Parse::RecDescent: Treating "/table/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD :" as a rule declaration
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "DIGITS :" as a rule declaration
    Parse::RecDescent: Treating "/\d+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "COMMA :" as a rule declaration
    Parse::RecDescent: Treating "," as a literal terminal
    Parse::RecDescent: Treating "BACKTICK :" as a rule declaration
    Parse::RecDescent: Treating "`" as a literal terminal
    Parse::RecDescent: Treating "DOUBLE_QUOTE:" as a rule declaration
    Parse::RecDescent: Treating """ as a literal terminal
    Parse::RecDescent: Treating "QUOTED_NAME :" as a rule declaration
    Parse::RecDescent: Treating "BACKTICK" as a subrule match
    Parse::RecDescent: Treating "/[^`]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "BACKTICK" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "DOUBLE_QUOTE" as a subrule match
    Parse::RecDescent: Treating "/[^"]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "DOUBLE_QUOTE" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "NAME:" as a rule declaration
    Parse::RecDescent: Treating "QUOTED_NAME" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "VALUE :" as a rule declaration
    Parse::RecDescent: Treating "/[-+]?\.?\d+(?:[eE]\d+)?/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ $item[1] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ # remove leading/trailing quotes my $val =
                       $item[1]; $val =~ s/^['"]|['"]$//g; $return = $val; }"
                       as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/NULL/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'NULL' }" as an action
    Parse::RecDescent: Treating "# always a scalar-ref, so that it is treated
                       as a function and not quoted by consumers" as a comment
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP :" as a rule declaration
    Parse::RecDescent: Treating "/current_timestamp(\(\))?/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ \'CURRENT_TIMESTAMP' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/now\(\)/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ \'CURRENT_TIMESTAMP' }" as an action
printing code (841063) to RD_TRACE
 1|startrule |Trying rule: [startrule]              |
 1|startrule |                                      |"\nCREATE TABLE film (\n
  |          |                                      |filmid INTEGER
 1|startrule |                                      |AUTO_INCREMENT PRIMARY
  |          |                                      |KEY,\n title VARCHAR(255),\n
 1|startrule |                                      |rating VARCHAR(5)\n);"
 1|startrule |Trying production: [statement eofile] |
 1|startrule |Trying repeated subrule: [statement]  |
 2|statement |Trying rule: [statement]              |
 2|statement |Trying production: [comment]          |
 2|statement |Trying subrule: [comment]             |
 3| comment  |Trying rule: [comment]                |
 3| comment  |Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |Trying production: [m{ / \* (?! \!)   |
  |          |.*? \* / }xs]                         |
 3| comment  |                                      |
 3| comment  |Trying terminal: [m{ / \* (?! \!) .*? |
  |          |\* / }xs]                             |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [comment]>>   |
 2|statement |Trying production: [use]              |
 2|statement |Trying subrule: [use]                 |
 3|   use    |Trying rule: [use]                    |
 3|   use    |Trying production: [/use/i WORD       |
  |          |'$delimiter']                         |
 3|   use    |                                      |
 3|   use    |Trying terminal: [/use/i]             |
 3|   use    |<<Didn't match terminal>>             |
 3|   use    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [use]>>       |
 2|statement |Trying production: [set]              |
 2|statement |Trying subrule: [set]                 |
 3|   set    |Trying rule: [set]                    |
 3|   set    |Trying production: [/set/i            |
  |          |not_delimiter '$delimiter']           |
 3|   set    |                                      |
 3|   set    |Trying terminal: [/set/i]             |
 3|   set    |<<Didn't match terminal>>             |
 3|   set    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [set]>>       |
 2|statement |Trying production: [drop]             |
 2|statement |Trying subrule: [drop]                |
 3|   drop   |Trying rule: [drop]                   |
 3|   drop   |Trying production: [/drop/i TABLE     |
  |          |not_delimiter '$delimiter']           |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |Trying production: [/drop/i WORD      |
  |          |'$delimiter']                         |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [drop]>>      |
 2|statement |Trying production: [create]           |
 2|statement |Trying subrule: [create]              |
 3|  create  |Trying rule: [create]                 |
 3|  create  |Trying production: [CREATE /database/i|
  |          |WORD '$delimiter']                    |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |>>Matched terminal<< (return value:   |
  |          |[CREATE])                             |
 4|  CREATE  |                                      |
 4|  CREATE  |                                      |" TABLE film (\n filmid
  |          |                                      |INTEGER AUTO_INCREMENT
 4|  CREATE  |                                      |PRIMARY KEY,\n title
  |          |                                      |VARCHAR(255),\n rating
 4|  CREATE  |                                      |VARCHAR(5)\n);"
 4|  CREATE  |>>Matched production: [/create/i]<<   |
 4|  CREATE  |>>Matched rule<< (return value:       |
  |          |[CREATE])                             |
 4|  CREATE  |                                      |
 4|  CREATE  |(consumed: [ CREATE])                 |
 3|  create  |>>Matched subrule: [CREATE]<< (return |
  |          |value: [CREATE]                       |
 3|  create  |                                      |
 3|  create  |Trying terminal: [/database/i]        |
 3|  create  |<<Didn't match terminal>>             |
 3|  create  |Trying production: [CREATE TEMPORARY  |
  |          |TABLE opt_if_not_exists table_name '('|
 3|  create  |<leftop: create_definition /,/        |
  |          |create_definition> /(,\s*)?\)/        |
 3|  create  |table_option '$delimiter']            |
 3|  create  |                                      |"\nCREATE TABLE film (\n
  |          |                                      |filmid INTEGER
 3|  create  |                                      |AUTO_INCREMENT PRIMARY
  |          |                                      |KEY,\n title VARCHAR(255),\n
 3|  create  |                                      |rating VARCHAR(5)\n);"
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |>>Matched terminal<< (return value:   |
  |          |[CREATE])                             |
 4|  CREATE  |                                      |
 4|  CREATE  |                                      |" TABLE film (\n filmid
  |          |                                      |INTEGER AUTO_INCREMENT
 4|  CREATE  |                                      |PRIMARY KEY,\n title
  |          |                                      |VARCHAR(255),\n rating
 4|  CREATE  |                                      |VARCHAR(5)\n);"
 4|  CREATE  |>>Matched production: [/create/i]<<   |
 4|  CREATE  |>>Matched rule<< (return value:       |
  |          |[CREATE])                             |
 4|  CREATE  |                                      |
 4|  CREATE  |(consumed: [ CREATE])                 |
 3|  create  |>>Matched subrule: [CREATE]<< (return |
  |          |value: [CREATE]                       |
 3|  create  |                                      |
 3|  create  |Trying repeated subrule: [TEMPORARY]  |
 4|TEMPORARY |Trying rule: [TEMPORARY]              |
 4|TEMPORARY |Trying production: [/temporary/i]     |
 4|TEMPORARY |Trying terminal: [/temporary/i]       |
 4|TEMPORARY |<<Didn't match terminal>>             |
 4|TEMPORARY |<<Didn't match rule>>                 |
 3|  create  |>>Matched repeated subrule:           |
  |          |[TEMPORARY]<< (0 times)               |
 3|  create  |                                      |
 3|  create  |Trying subrule: [TABLE]               |
 4|  TABLE   |Trying rule: [TABLE]                  |
 4|  TABLE   |Trying production: [/table/i]         |
 4|  TABLE   |Trying terminal: [/table/i]           |
 4|  TABLE   |>>Matched terminal<< (return value:   |
  |          |[TABLE])                              |
 4|  TABLE   |                                      |
 4|  TABLE   |                                      |" film (\n filmid INTEGER
  |          |                                      |AUTO_INCREMENT PRIMARY
 4|  TABLE   |                                      |KEY,\n title VARCHAR(255),\n
  |          |                                      |rating VARCHAR(5)\n);"
 4|  TABLE   |                                      |
 4|  TABLE   |>>Matched production: [/table/i]<<    |
 4|  TABLE   |>>Matched rule<< (return value:       |
  |          |[TABLE])                              |
 4|  TABLE   |                                      |
 4|  TABLE   |(consumed: [ TABLE])                  |
 3|  create  |>>Matched subrule: [TABLE]<< (return  |
  |          |value: [TABLE]                        |
 3|  create  |                                      |
 3|  create  |Trying repeated subrule:              |
  |          |[opt_if_not_exists]                   |
 3|  create  |                                      |
 4|opt_if_not|Trying rule: [opt_if_not_exists]      |
 4|opt_if_not|Trying production: [/if not exists/i] |
 4|opt_if_not|Trying terminal: [/if not exists/i]   |
 4|opt_if_not|<<Didn't match terminal>>             |
 4|opt_if_not|<<Didn't match rule>>                 |
 3|  create  |>>Matched repeated subrule:           |
  |          |[opt_if_not_exists]<< (0 times)       |
 3|  create  |                                      |
 3|  create  |Trying subrule: [table_name]          |
 4|table_name|Trying rule: [table_name]             |
 4|table_name|Trying production: [NAME]             |
 4|table_name|Trying subrule: [NAME]                |
 5|   NAME   |Trying rule: [NAME]                   |
 5|   NAME   |Trying production: [QUOTED_NAME]      |
 5|   NAME   |Trying subrule: [QUOTED_NAME]         |
 6|QUOTED_NAM|Trying rule: [QUOTED_NAME]            |
 6|QUOTED_NAM|Trying production: [BACKTICK /[^`]+/  |
  |          |BACKTICK]                             |
 6|QUOTED_NAM|                                      |
 6|QUOTED_NAM|Trying subrule: [BACKTICK]            |
 7| BACKTICK |Trying rule: [BACKTICK]               |
 7| BACKTICK |Trying production: ['`']              |
 7| BACKTICK |Trying terminal: ['`']                |
 7| BACKTICK |<<Didn't match terminal>>             |
 7| BACKTICK |<<Didn't match rule>>                 |
 6|QUOTED_NAM|<<Didn't match subrule: [BACKTICK]>>  |
 6|QUOTED_NAM|Trying production: [DOUBLE_QUOTE      |
  |          |/[^"]+/ DOUBLE_QUOTE]                 |
 6|QUOTED_NAM|                                      |
 6|QUOTED_NAM|Trying subrule: [DOUBLE_QUOTE]        |
 7|DOUBLE_QUO|Trying rule: [DOUBLE_QUOTE]           |
 7|DOUBLE_QUO|Trying production: ['"']              |
 7|DOUBLE_QUO|Trying terminal: ['"']                |
 7|DOUBLE_QUO|<<Didn't match terminal>>             |
 7|DOUBLE_QUO|<<Didn't match rule>>                 |
 6|QUOTED_NAM|<<Didn't match subrule:               |
  |          |[DOUBLE_QUOTE]>>                      |
 6|QUOTED_NAM|                                      |
 6|QUOTED_NAM|<<Didn't match rule>>                 |
 5|   NAME   |<<Didn't match subrule:               |
  |          |[QUOTED_NAME]>>                       |
 5|   NAME   |                                      |
 5|   NAME   |Trying production: [/\w+/]            |
 5|   NAME   |Trying terminal: [/\w+/]              |
 5|   NAME   |>>Matched terminal<< (return value:   |
  |          |[film])                               |
 5|   NAME   |                                      |
 5|   NAME   |                                      |" (\n filmid INTEGER
  |          |                                      |AUTO_INCREMENT PRIMARY
 5|   NAME   |                                      |KEY,\n title VARCHAR(255),\n
  |          |                                      |rating VARCHAR(5)\n);"
 5|   NAME   |                                      |
 5|   NAME   |>>Matched production: [/\w+/]<<       |
 5|   NAME   |>>Matched rule<< (return value:       |
  |          |[film])                               |
 5|   NAME   |                                      |
 5|   NAME   |(consumed: [ film])                   |
 4|table_name|>>Matched subrule: [NAME]<< (return   |
  |          |value: [film]                         |
 4|table_name|                                      |
 4|table_name|>>Matched production: [NAME]<<        |
 4|table_name|>>Matched rule<< (return value:       |
  |          |[film])                               |
 4|table_name|                                      |
 4|table_name|(consumed: [ film])                   |
 3|  create  |>>Matched subrule: [table_name]<<     |
  |          |(return value: [film]                 |
 3|  create  |                                      |
 3|  create  |Trying terminal: ['(']                |
 3|  create  |>>Matched terminal<< (return value:   |
  |          |[(])                                  |
 3|  create  |                                      |
 3|  create  |                                      |"\n filmid INTEGER
  |          |                                      |AUTO_INCREMENT PRIMARY
 3|  create  |                                      |KEY,\n title VARCHAR(255),\n
  |          |                                      |rating VARCHAR(5)\n);"
 3|  create  |                                      |
 3|  create  |Trying operator: [<leftop:            |
  |          |create_definition /,/                 |
 3|  create  |create_definition>]                   |
 3|  create  |Trying subrule: [create_definition]   |
 4|create_def|Trying rule: [create_definition]      |
 4|create_def|Trying production: [constraint]       |
 4|create_def|Trying subrule: [constraint]          |
 5|constraint|Trying rule: [constraint]             |
 5|constraint|Trying production: [primary_key_def]  |
 5|constraint|Trying subrule: [primary_key_def]     |
 6|primary_ke|Trying rule: [primary_key_def]        |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_type '(' <leftop:               |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_name_not_using '(' <leftop:     |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[primary_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [unique_key_def]   |
 5|constraint|Trying subrule: [unique_key_def]      |
 6|unique_key|Trying rule: [unique_key_def]         |
 6|unique_key|Trying production: [UNIQUE KEY        |
  |          |index_name_not_using index_type '('   |
 6|unique_key|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|unique_key|                                      |
 6|unique_key|Trying subrule: [UNIQUE]              |
 7|  UNIQUE  |Trying rule: [UNIQUE]                 |
 7|  UNIQUE  |Trying production: [/unique/i]        |
 7|  UNIQUE  |Trying terminal: [/unique/i]          |
 7|  UNIQUE  |<<Didn't match terminal>>             |
 7|  UNIQUE  |<<Didn't match rule>>                 |
 6|unique_key|<<Didn't match subrule: [UNIQUE]>>    |
 6|unique_key|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[unique_key_def]>>                    |
 5|constraint|                                      |
 5|constraint|Trying production: [foreign_key_def]  |
 5|constraint|Trying subrule: [foreign_key_def]     |
 6|foreign_ke|Trying rule: [foreign_key_def]        |
 6|foreign_ke|Trying production:                    |
  |          |[foreign_key_def_begin                |
 6|foreign_ke|parens_field_list                     |
  |          |reference_definition]                 |
 6|foreign_ke|                                      |
 6|foreign_ke|Trying subrule:                       |
  |          |[foreign_key_def_begin]               |
 6|foreign_ke|                                      |
 7|foreign_ke|Trying rule: [foreign_key_def_begin]  |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i WORD]                  |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i NAME|
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i    |
  |          |WORD]                                 |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i]   |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|<<Didn't match rule>>                 |
 6|foreign_ke|<<Didn't match subrule:               |
  |          |[foreign_key_def_begin]>>             |
 6|foreign_ke|                                      |
 6|foreign_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[foreign_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [<error...>]       |
 5|constraint|Trying directive: [<error...>]        |
 5|constraint|<<Didn't match directive>>            |
 5|constraint|<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [constraint]>>|
 4|create_def|Trying production: [index]            |
 4|create_def|Trying subrule: [index]               |
 5|  index   |Trying rule: [index]                  |
 5|  index   |Trying production: [normal_index]     |
 5|  index   |Trying subrule: [normal_index]        |
 6|normal_ind|Trying rule: [normal_index]           |
 6|normal_ind|Trying production: [KEY               |
  |          |index_name_not_using index_type '('   |
 6|normal_ind|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|normal_ind|                                      |
 6|normal_ind|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|normal_ind|<<Didn't match subrule: [KEY]>>       |
 6|normal_ind|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[normal_index]>>                      |
 5|  index   |                                      |
 5|  index   |Trying production: [fulltext_index]   |
 5|  index   |Trying subrule: [fulltext_index]      |
 6|fulltext_i|Trying rule: [fulltext_index]         |
 6|fulltext_i|Trying production: [/fulltext/i KEY   |
  |          |index_name '(' <leftop:               |
 6|fulltext_i|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|fulltext_i|                                      |
 6|fulltext_i|Trying terminal: [/fulltext/i]        |
 6|fulltext_i|<<Didn't match terminal>>             |
 6|fulltext_i|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[fulltext_index]>>                    |
 5|  index   |                                      |
 5|  index   |Trying production: [spatial_index]    |
 5|  index   |Trying subrule: [spatial_index]       |
 6|spatial_in|Trying rule: [spatial_index]          |
 6|spatial_in|Trying production: [/spatial/i KEY    |
  |          |index_name '(' <leftop:               |
 6|spatial_in|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|spatial_in|                                      |
 6|spatial_in|Trying terminal: [/spatial/i]         |
 6|spatial_in|<<Didn't match terminal>>             |
 6|spatial_in|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[spatial_index]>>                     |
 5|  index   |                                      |
 5|  index   |Trying production: [<error...>]       |
 5|  index   |Trying directive: [<error...>]        |
 5|  index   |<<Didn't match directive>>            |
 5|  index   |<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [index]>>     |
 4|create_def|Trying production: [field]            |
 4|create_def|Trying subrule: [field]               |
 5|  field   |Trying rule: [field]                  |
 5|  field   |Trying production: [field_comment     |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]              |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying subrule: [field_name]          |
 6|field_name|Trying rule: [field_name]             |
 6|field_name|Trying production: [NAME]             |
 6|field_name|Trying subrule: [NAME]                |
 7|   NAME   |Trying rule: [NAME]                   |
 7|   NAME   |Trying production: [QUOTED_NAME]      |
 7|   NAME   |Trying subrule: [QUOTED_NAME]         |
 8|QUOTED_NAM|Trying rule: [QUOTED_NAME]            |
 8|QUOTED_NAM|Trying production: [BACKTICK /[^`]+/  |
  |          |BACKTICK]                             |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [BACKTICK]            |
 9| BACKTICK |Trying rule: [BACKTICK]               |
 9| BACKTICK |Trying production: ['`']              |
 9| BACKTICK |Trying terminal: ['`']                |
 9| BACKTICK |<<Didn't match terminal>>             |
 9| BACKTICK |<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule: [BACKTICK]>>  |
 8|QUOTED_NAM|Trying production: [DOUBLE_QUOTE      |
  |          |/[^"]+/ DOUBLE_QUOTE]                 |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [DOUBLE_QUOTE]        |
 9|DOUBLE_QUO|Trying rule: [DOUBLE_QUOTE]           |
 9|DOUBLE_QUO|Trying production: ['"']              |
 9|DOUBLE_QUO|Trying terminal: ['"']                |
 9|DOUBLE_QUO|<<Didn't match terminal>>             |
 9|DOUBLE_QUO|<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule:               |
  |          |[DOUBLE_QUOTE]>>                      |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|<<Didn't match rule>>                 |
 7|   NAME   |<<Didn't match subrule:               |
  |          |[QUOTED_NAME]>>                       |
 7|   NAME   |                                      |
 7|   NAME   |Trying production: [/\w+/]            |
 7|   NAME   |Trying terminal: [/\w+/]              |
 7|   NAME   |>>Matched terminal<< (return value:   |
  |          |[filmid])                             |
 7|   NAME   |                                      |
 7|   NAME   |                                      |" INTEGER AUTO_INCREMENT
  |          |                                      |PRIMARY KEY,\n title
 7|   NAME   |                                      |VARCHAR(255),\n rating
  |          |                                      |VARCHAR(5)\n);"
 7|   NAME   |                                      |
 7|   NAME   |>>Matched production: [/\w+/]<<       |
 7|   NAME   |>>Matched rule<< (return value:       |
  |          |[filmid])                             |
 7|   NAME   |                                      |
 7|   NAME   |(consumed: [  filmid])                |
 6|field_name|>>Matched subrule: [NAME]<< (return   |
  |          |value: [filmid]                       |
 6|field_name|                                      |
 6|field_name|>>Matched production: [NAME]<<        |
 6|field_name|>>Matched rule<< (return value:       |
  |          |[filmid])                             |
 6|field_name|                                      |
 6|field_name|(consumed: [  filmid])                |
 5|  field   |>>Matched subrule: [field_name]<<     |
  |          |(return value: [filmid]               |
 5|  field   |                                      |
 5|  field   |Trying subrule: [data_type]           |
 6|data_type |Trying rule: [data_type]              |
 6|data_type |Trying production: [WORD              |
  |          |parens_value_list type_qualifier]     |
 6|data_type |                                      |
 6|data_type |Trying subrule: [WORD]                |
 7|   WORD   |Trying rule: [WORD]                   |
 7|   WORD   |Trying production: [/\w+/]            |
 7|   WORD   |Trying terminal: [/\w+/]              |
 7|   WORD   |>>Matched terminal<< (return value:   |
  |          |[INTEGER])                            |
 7|   WORD   |                                      |
 7|   WORD   |                                      |" AUTO_INCREMENT PRIMARY
  |          |                                      |KEY,\n title VARCHAR(255),\n
 7|   WORD   |                                      |rating VARCHAR(5)\n);"
 7|   WORD   |>>Matched production: [/\w+/]<<       |
 7|   WORD   |>>Matched rule<< (return value:       |
  |          |[INTEGER])                            |
 7|   WORD   |                                      |
 7|   WORD   |(consumed: [ INTEGER])                |
 6|data_type |>>Matched subrule: [WORD]<< (return   |
  |          |value: [INTEGER]                      |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[parens_value_list]                   |
 6|data_type |                                      |
 7|parens_val|Trying rule: [parens_value_list]      |
 7|parens_val|Trying production: ['(' <leftop: VALUE|
  |          |/,/ VALUE> ')']                       |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: ['(']                |
 7|parens_val|<<Didn't match terminal>>             |
 7|parens_val|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[parens_value_list]<< (0 times)       |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[type_qualifier]                      |
 6|data_type |                                      |
 7|type_quali|Trying rule: [type_qualifier]         |
 7|type_quali|Trying production:                    |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|Trying terminal:                      |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|<<Didn't match terminal>>             |
 7|type_quali|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[type_qualifier]<< (0 times)          |
 6|data_type |                                      |
 6|data_type |Trying action                         |
 6|data_type |>>Matched action<< (return value:     |
  |          |[HASH(0x4c50db0)])                    |
 6|data_type |                                      |
 6|data_type |>>Matched production: [WORD           |
  |          |parens_value_list type_qualifier]<<   |
 6|data_type |                                      |
 6|data_type |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c50db0)])                    |
 6|data_type |                                      |
 6|data_type |(consumed: [ INTEGER])                |
 5|  field   |>>Matched subrule: [data_type]<<      |
  |          |(return value: [HASH(0x4c50db0)]      |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_qualifier]                     |
 5|  field   |                                      |
 6|field_qual|Trying rule: [field_qualifier]        |
 6|field_qual|Trying production: [not_null]         |
 6|field_qual|Trying subrule: [not_null]            |
 7| not_null |Trying rule: [not_null]               |
 7| not_null |Trying production: [/not/i /null/i]   |
 7| not_null |Trying terminal: [/not/i]             |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |Trying production: [/null/i]          |
 7| not_null |Trying terminal: [/null/i]            |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [not_null]>>  |
 6|field_qual|Trying production: [default_val]      |
 6|field_qual|Trying subrule: [default_val]         |
 7|default_va|Trying rule: [default_val]            |
 7|default_va|Trying production: [/default/i        |
  |          |CURRENT_TIMESTAMP]                    |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i string]|
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i bit]   |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i        |
  |          |/[\w\d:.-]+/]                         |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[default_val]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [auto_inc]         |
 6|field_qual|Trying subrule: [auto_inc]            |
 7| auto_inc |Trying rule: [auto_inc]               |
 7| auto_inc |Trying production: [/auto_increment/i]|
 7| auto_inc |Trying terminal: [/auto_increment/i]  |
 7| auto_inc |>>Matched terminal<< (return value:   |
  |          |[AUTO_INCREMENT])                     |
 7| auto_inc |                                      |
 7| auto_inc |                                      |" PRIMARY KEY,\n title
  |          |                                      |VARCHAR(255),\n rating
 7| auto_inc |                                      |VARCHAR(5)\n);"
 7| auto_inc |Trying action                         |
 7| auto_inc |>>Matched action<< (return value: [1])|
 7| auto_inc |>>Matched production:                 |
  |          |[/auto_increment/i]<<                 |
 7| auto_inc |                                      |
 7| auto_inc |>>Matched rule<< (return value: [1])  |
 7| auto_inc |(consumed: [ AUTO_INCREMENT])         |
 6|field_qual|>>Matched subrule: [auto_inc]<<       |
  |          |(return value: [1]                    |
 6|field_qual|                                      |
 6|field_qual|Trying action                         |
 6|field_qual|>>Matched action<< (return value:     |
  |          |[HASH(0x4c50d80)])                    |
 6|field_qual|                                      |
 6|field_qual|>>Matched production: [auto_inc]<<    |
 6|field_qual|>>Matched rule<< (return value:       |
  |          |[HASH(0x4c50d80)])                    |
 6|field_qual|                                      |
 6|field_qual|(consumed: [ AUTO_INCREMENT])         |
 6|field_qual|Trying rule: [field_qualifier]        |
 6|field_qual|Trying production: [not_null]         |
 6|field_qual|Trying subrule: [not_null]            |
 7| not_null |Trying rule: [not_null]               |
 7| not_null |Trying production: [/not/i /null/i]   |
 7| not_null |Trying terminal: [/not/i]             |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |Trying production: [/null/i]          |
 7| not_null |Trying terminal: [/null/i]            |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [not_null]>>  |
 6|field_qual|Trying production: [default_val]      |
 6|field_qual|Trying subrule: [default_val]         |
 7|default_va|Trying rule: [default_val]            |
 7|default_va|Trying production: [/default/i        |
  |          |CURRENT_TIMESTAMP]                    |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i string]|
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i bit]   |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i        |
  |          |/[\w\d:.-]+/]                         |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[default_val]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [auto_inc]         |
 6|field_qual|Trying subrule: [auto_inc]            |
 7| auto_inc |Trying rule: [auto_inc]               |
 7| auto_inc |Trying production: [/auto_increment/i]|
 7| auto_inc |Trying terminal: [/auto_increment/i]  |
 7| auto_inc |<<Didn't match terminal>>             |
 7| auto_inc |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [auto_inc]>>  |
 6|field_qual|Trying production: [primary_key]      |
 6|field_qual|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|>>Matched terminal<< (return value:   |
  |          |[PRIMARY])                            |
 7|primary_ke|                                      |
 7|primary_ke|                                      |" KEY,\n title
  |          |                                      |VARCHAR(255),\n rating
 7|primary_ke|                                      |VARCHAR(5)\n);"
 7|primary_ke|Trying terminal: [/key/i]             |
 7|primary_ke|>>Matched terminal<< (return value:   |
  |          |[KEY])                                |
 7|primary_ke|                                      |
 7|primary_ke|                                      |",\n title VARCHAR(255),\n
  |          |                                      |rating VARCHAR(5)\n);"
 7|primary_ke|                                      |
 7|primary_ke|Trying action                         |
 7|primary_ke|>>Matched action<< (return value: [1])|
 7|primary_ke|>>Matched production: [/primary/i     |
  |          |/key/i]<<                             |
 7|primary_ke|                                      |
 7|primary_ke|>>Matched rule<< (return value: [1])  |
 7|primary_ke|(consumed: [ PRIMARY KEY])            |
 6|field_qual|>>Matched subrule: [primary_key]<<    |
  |          |(return value: [1]                    |
 6|field_qual|                                      |
 6|field_qual|Trying action                         |
 6|field_qual|>>Matched action<< (return value:     |
  |          |[HASH(0x4c50e10)])                    |
 6|field_qual|                                      |
 6|field_qual|>>Matched production: [primary_key]<< |
 6|field_qual|>>Matched rule<< (return value:       |
  |          |[HASH(0x4c50e10)])                    |
 6|field_qual|                                      |
 6|field_qual|(consumed: [ PRIMARY KEY])            |
 6|field_qual|Trying rule: [field_qualifier]        |
 6|field_qual|Trying production: [not_null]         |
 6|field_qual|Trying subrule: [not_null]            |
 7| not_null |Trying rule: [not_null]               |
 7| not_null |Trying production: [/not/i /null/i]   |
 7| not_null |Trying terminal: [/not/i]             |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |Trying production: [/null/i]          |
 7| not_null |Trying terminal: [/null/i]            |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [not_null]>>  |
 6|field_qual|Trying production: [default_val]      |
 6|field_qual|Trying subrule: [default_val]         |
 7|default_va|Trying rule: [default_val]            |
 7|default_va|Trying production: [/default/i        |
  |          |CURRENT_TIMESTAMP]                    |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i string]|
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i bit]   |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i        |
  |          |/[\w\d:.-]+/]                         |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[default_val]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [auto_inc]         |
 6|field_qual|Trying subrule: [auto_inc]            |
 7| auto_inc |Trying rule: [auto_inc]               |
 7| auto_inc |Trying production: [/auto_increment/i]|
 7| auto_inc |Trying terminal: [/auto_increment/i]  |
 7| auto_inc |<<Didn't match terminal>>             |
 7| auto_inc |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [auto_inc]>>  |
 6|field_qual|Trying production: [primary_key]      |
 6|field_qual|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [unsigned]         |
 6|field_qual|Trying subrule: [unsigned]            |
 7| unsigned |Trying rule: [unsigned]               |
 7| unsigned |Trying production: [/unsigned/i]      |
 7| unsigned |Trying terminal: [/unsigned/i]        |
 7| unsigned |<<Didn't match terminal>>             |
 7| unsigned |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [unsigned]>>  |
 6|field_qual|Trying production: [/character set/i  |
  |          |WORD]                                 |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/character set/i]   |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/collate/i WORD]  |
 6|field_qual|Trying terminal: [/collate/i]         |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/on update/i]       |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/unique/i KEY]    |
 6|field_qual|Trying terminal: [/unique/i]          |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [KEY]              |
 6|field_qual|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [KEY]>>       |
 6|field_qual|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_qualifier]<< (2 times)         |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment2]                      |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment2]         |
 6|field_comm|Trying production: [/comment/i        |
  |          |/'.*?'/]                              |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/comment/i]         |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment2]<< (0 times)          |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[reference_definition]                |
 5|  field   |                                      |
 6|reference_|Trying rule: [reference_definition]   |
 6|reference_|Trying production: [/references/i     |
  |          |table_name parens_field_list          |
 6|reference_|match_type on_delete on_update]       |
 6|reference_|Trying terminal: [/references/i]      |
 6|reference_|<<Didn't match terminal>>             |
 6|reference_|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[reference_definition]<< (0 times)    |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule: [on_update]  |
 6|on_update |Trying rule: [on_update]              |
 6|on_update |Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |Trying production: [/on update/i      |
  |          |reference_option]                     |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[on_update]<< (0 times)               |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying action                         |
 5|  field   |>>Matched action<< (return value:     |
  |          |[HASH(0x4c53198)])                    |
 5|  field   |                                      |
 5|  field   |>>Matched production: [field_comment  |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]<<            |
 5|  field   |                                      |
 5|  field   |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c53198)])                    |
 5|  field   |                                      |
 5|  field   |(consumed: [  filmid INTEGER          |
  |          |AUTO_INCREMENT PRIMARY KEY])          |
 5|  field   |                                      |
 4|create_def|>>Matched subrule: [field]<< (return  |
  |          |value: [HASH(0x4c53198)]              |
 4|create_def|                                      |
 4|create_def|>>Matched production: [field]<<       |
 4|create_def|>>Matched rule<< (return value:       |
  |          |[HASH(0x4c53198)])                    |
 4|create_def|                                      |
 4|create_def|(consumed: [  filmid INTEGER          |
  |          |AUTO_INCREMENT PRIMARY KEY])          |
 4|create_def|                                      |
 3|  create  |>>Matched subrule:                    |
  |          |[create_definition]<< (return value:  |
 3|  create  |[HASH(0x4c53198)]                     |
 3|  create  |Trying terminal: [/,/]                |
 3|  create  |>>Matched terminal<< (return value:   |
  |          |[,])                                  |
 3|  create  |                                      |
 3|  create  |                                      |"\n title VARCHAR(255),\n
  |          |                                      |rating VARCHAR(5)\n);"
 3|  create  |                                      |
 3|  create  |Trying subrule: [create_definition]   |
 4|create_def|Trying rule: [create_definition]      |
 4|create_def|Trying production: [constraint]       |
 4|create_def|Trying subrule: [constraint]          |
 5|constraint|Trying rule: [constraint]             |
 5|constraint|Trying production: [primary_key_def]  |
 5|constraint|Trying subrule: [primary_key_def]     |
 6|primary_ke|Trying rule: [primary_key_def]        |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_type '(' <leftop:               |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_name_not_using '(' <leftop:     |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[primary_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [unique_key_def]   |
 5|constraint|Trying subrule: [unique_key_def]      |
 6|unique_key|Trying rule: [unique_key_def]         |
 6|unique_key|Trying production: [UNIQUE KEY        |
  |          |index_name_not_using index_type '('   |
 6|unique_key|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|unique_key|                                      |
 6|unique_key|Trying subrule: [UNIQUE]              |
 7|  UNIQUE  |Trying rule: [UNIQUE]                 |
 7|  UNIQUE  |Trying production: [/unique/i]        |
 7|  UNIQUE  |Trying terminal: [/unique/i]          |
 7|  UNIQUE  |<<Didn't match terminal>>             |
 7|  UNIQUE  |<<Didn't match rule>>                 |
 6|unique_key|<<Didn't match subrule: [UNIQUE]>>    |
 6|unique_key|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[unique_key_def]>>                    |
 5|constraint|                                      |
 5|constraint|Trying production: [foreign_key_def]  |
 5|constraint|Trying subrule: [foreign_key_def]     |
 6|foreign_ke|Trying rule: [foreign_key_def]        |
 6|foreign_ke|Trying production:                    |
  |          |[foreign_key_def_begin                |
 6|foreign_ke|parens_field_list                     |
  |          |reference_definition]                 |
 6|foreign_ke|                                      |
 6|foreign_ke|Trying subrule:                       |
  |          |[foreign_key_def_begin]               |
 6|foreign_ke|                                      |
 7|foreign_ke|Trying rule: [foreign_key_def_begin]  |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i WORD]                  |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i NAME|
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i    |
  |          |WORD]                                 |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i]   |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|<<Didn't match rule>>                 |
 6|foreign_ke|<<Didn't match subrule:               |
  |          |[foreign_key_def_begin]>>             |
 6|foreign_ke|                                      |
 6|foreign_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[foreign_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [<error...>]       |
 5|constraint|Trying directive: [<error...>]        |
 5|constraint|<<Didn't match directive>>            |
 5|constraint|<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [constraint]>>|
 4|create_def|Trying production: [index]            |
 4|create_def|Trying subrule: [index]               |
 5|  index   |Trying rule: [index]                  |
 5|  index   |Trying production: [normal_index]     |
 5|  index   |Trying subrule: [normal_index]        |
 6|normal_ind|Trying rule: [normal_index]           |
 6|normal_ind|Trying production: [KEY               |
  |          |index_name_not_using index_type '('   |
 6|normal_ind|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|normal_ind|                                      |
 6|normal_ind|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|normal_ind|<<Didn't match subrule: [KEY]>>       |
 6|normal_ind|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[normal_index]>>                      |
 5|  index   |                                      |
 5|  index   |Trying production: [fulltext_index]   |
 5|  index   |Trying subrule: [fulltext_index]      |
 6|fulltext_i|Trying rule: [fulltext_index]         |
 6|fulltext_i|Trying production: [/fulltext/i KEY   |
  |          |index_name '(' <leftop:               |
 6|fulltext_i|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|fulltext_i|                                      |
 6|fulltext_i|Trying terminal: [/fulltext/i]        |
 6|fulltext_i|<<Didn't match terminal>>             |
 6|fulltext_i|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[fulltext_index]>>                    |
 5|  index   |                                      |
 5|  index   |Trying production: [spatial_index]    |
 5|  index   |Trying subrule: [spatial_index]       |
 6|spatial_in|Trying rule: [spatial_index]          |
 6|spatial_in|Trying production: [/spatial/i KEY    |
  |          |index_name '(' <leftop:               |
 6|spatial_in|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|spatial_in|                                      |
 6|spatial_in|Trying terminal: [/spatial/i]         |
 6|spatial_in|<<Didn't match terminal>>             |
 6|spatial_in|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[spatial_index]>>                     |
 5|  index   |                                      |
 5|  index   |Trying production: [<error...>]       |
 5|  index   |Trying directive: [<error...>]        |
 5|  index   |<<Didn't match directive>>            |
 5|  index   |<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [index]>>     |
 4|create_def|Trying production: [field]            |
 4|create_def|Trying subrule: [field]               |
 5|  field   |Trying rule: [field]                  |
 5|  field   |Trying production: [field_comment     |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]              |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying subrule: [field_name]          |
 6|field_name|Trying rule: [field_name]             |
 6|field_name|Trying production: [NAME]             |
 6|field_name|Trying subrule: [NAME]                |
 7|   NAME   |Trying rule: [NAME]                   |
 7|   NAME   |Trying production: [QUOTED_NAME]      |
 7|   NAME   |Trying subrule: [QUOTED_NAME]         |
 8|QUOTED_NAM|Trying rule: [QUOTED_NAME]            |
 8|QUOTED_NAM|Trying production: [BACKTICK /[^`]+/  |
  |          |BACKTICK]                             |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [BACKTICK]            |
 9| BACKTICK |Trying rule: [BACKTICK]               |
 9| BACKTICK |Trying production: ['`']              |
 9| BACKTICK |Trying terminal: ['`']                |
 9| BACKTICK |<<Didn't match terminal>>             |
 9| BACKTICK |<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule: [BACKTICK]>>  |
 8|QUOTED_NAM|Trying production: [DOUBLE_QUOTE      |
  |          |/[^"]+/ DOUBLE_QUOTE]                 |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [DOUBLE_QUOTE]        |
 9|DOUBLE_QUO|Trying rule: [DOUBLE_QUOTE]           |
 9|DOUBLE_QUO|Trying production: ['"']              |
 9|DOUBLE_QUO|Trying terminal: ['"']                |
 9|DOUBLE_QUO|<<Didn't match terminal>>             |
 9|DOUBLE_QUO|<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule:               |
  |          |[DOUBLE_QUOTE]>>                      |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|<<Didn't match rule>>                 |
 7|   NAME   |<<Didn't match subrule:               |
  |          |[QUOTED_NAME]>>                       |
 7|   NAME   |                                      |
 7|   NAME   |Trying production: [/\w+/]            |
 7|   NAME   |Trying terminal: [/\w+/]              |
 7|   NAME   |>>Matched terminal<< (return value:   |
  |          |[title])                              |
 7|   NAME   |                                      |
 7|   NAME   |                                      |" VARCHAR(255),\n rating
  |          |                                      |VARCHAR(5)\n);"
 7|   NAME   |                                      |
 7|   NAME   |>>Matched production: [/\w+/]<<       |
 7|   NAME   |>>Matched rule<< (return value:       |
  |          |[title])                              |
 7|   NAME   |                                      |
 7|   NAME   |(consumed: [  title])                 |
 6|field_name|>>Matched subrule: [NAME]<< (return   |
  |          |value: [title]                        |
 6|field_name|                                      |
 6|field_name|>>Matched production: [NAME]<<        |
 6|field_name|>>Matched rule<< (return value:       |
  |          |[title])                              |
 6|field_name|                                      |
 6|field_name|(consumed: [  title])                 |
 5|  field   |>>Matched subrule: [field_name]<<     |
  |          |(return value: [title]                |
 5|  field   |                                      |
 5|  field   |Trying subrule: [data_type]           |
 6|data_type |Trying rule: [data_type]              |
 6|data_type |Trying production: [WORD              |
  |          |parens_value_list type_qualifier]     |
 6|data_type |                                      |
 6|data_type |Trying subrule: [WORD]                |
 7|   WORD   |Trying rule: [WORD]                   |
 7|   WORD   |Trying production: [/\w+/]            |
 7|   WORD   |Trying terminal: [/\w+/]              |
 7|   WORD   |>>Matched terminal<< (return value:   |
  |          |[VARCHAR])                            |
 7|   WORD   |                                      |
 7|   WORD   |                                      |"(255),\n rating
  |          |                                      |VARCHAR(5)\n);"
 7|   WORD   |                                      |
 7|   WORD   |>>Matched production: [/\w+/]<<       |
 7|   WORD   |>>Matched rule<< (return value:       |
  |          |[VARCHAR])                            |
 7|   WORD   |                                      |
 7|   WORD   |(consumed: [ VARCHAR])                |
 6|data_type |>>Matched subrule: [WORD]<< (return   |
  |          |value: [VARCHAR]                      |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[parens_value_list]                   |
 6|data_type |                                      |
 7|parens_val|Trying rule: [parens_value_list]      |
 7|parens_val|Trying production: ['(' <leftop: VALUE|
  |          |/,/ VALUE> ')']                       |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: ['(']                |
 7|parens_val|>>Matched terminal<< (return value:   |
  |          |[(])                                  |
 7|parens_val|                                      |
 7|parens_val|                                      |"255),\n rating
  |          |                                      |VARCHAR(5)\n);"
 7|parens_val|                                      |
 7|parens_val|Trying operator: [<leftop: VALUE /,/  |
  |          |VALUE>]                               |
 7|parens_val|                                      |
 7|parens_val|Trying subrule: [VALUE]               |
 8|  VALUE   |Trying rule: [VALUE]                  |
 8|  VALUE   |Trying production: [/[-               |
  |          |+]?\.?\d+(?:[eE]\d+)?/]               |
 8|  VALUE   |                                      |
 8|  VALUE   |Trying terminal: [/[-                 |
  |          |+]?\.?\d+(?:[eE]\d+)?/]               |
 8|  VALUE   |                                      |
 8|  VALUE   |>>Matched terminal<< (return value:   |
  |          |[255])                                |
 8|  VALUE   |                                      |
 8|  VALUE   |                                      |"),\n rating VARCHAR(5)\n);"
 8|  VALUE   |Trying action                         |
 8|  VALUE   |>>Matched action<< (return value:     |
  |          |[255])                                |
 8|  VALUE   |                                      |
 8|  VALUE   |>>Matched production: [/[-            |
  |          |+]?\.?\d+(?:[eE]\d+)?/]<<             |
 8|  VALUE   |                                      |
 8|  VALUE   |>>Matched rule<< (return value: [255])|
 8|  VALUE   |(consumed: [255])                     |
 7|parens_val|>>Matched subrule: [VALUE]<< (return  |
  |          |value: [255]                          |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: [/,/]                |
 7|parens_val|<<Didn't match terminal>>             |
 7|parens_val|>>Matched operator: [<leftop: VALUE   |
  |          |/,/ VALUE>]<< (return value: [255]    |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: [')']                |
 7|parens_val|>>Matched terminal<< (return value:   |
  |          |[)])                                  |
 7|parens_val|                                      |
 7|parens_val|                                      |",\n rating VARCHAR(5)\n);"
 7|parens_val|Trying action                         |
 7|parens_val|>>Matched action<< (return value:     |
  |          |[ARRAY(0x4c53588)])                   |
 7|parens_val|                                      |
 7|parens_val|>>Matched production: ['(' <leftop:   |
  |          |VALUE /,/ VALUE> ')']<<               |
 7|parens_val|                                      |
 7|parens_val|>>Matched rule<< (return value:       |
  |          |[ARRAY(0x4c53588)])                   |
 7|parens_val|                                      |
 7|parens_val|(consumed: [(255)])                   |
 7|parens_val|Trying rule: [parens_value_list]      |
 7|parens_val|Trying production: ['(' <leftop: VALUE|
  |          |/,/ VALUE> ')']                       |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: ['(']                |
 7|parens_val|<<Didn't match terminal>>             |
 7|parens_val|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[parens_value_list]<< (1 times)       |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[type_qualifier]                      |
 6|data_type |                                      |
 7|type_quali|Trying rule: [type_qualifier]         |
 7|type_quali|Trying production:                    |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|Trying terminal:                      |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|<<Didn't match terminal>>             |
 7|type_quali|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[type_qualifier]<< (0 times)          |
 6|data_type |                                      |
 6|data_type |Trying action                         |
 6|data_type |>>Matched action<< (return value:     |
  |          |[HASH(0x4c53528)])                    |
 6|data_type |                                      |
 6|data_type |>>Matched production: [WORD           |
  |          |parens_value_list type_qualifier]<<   |
 6|data_type |                                      |
 6|data_type |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c53528)])                    |
 6|data_type |                                      |
 6|data_type |(consumed: [ VARCHAR(255)])           |
 5|  field   |>>Matched subrule: [data_type]<<      |
  |          |(return value: [HASH(0x4c53528)]      |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_qualifier]                     |
 5|  field   |                                      |
 6|field_qual|Trying rule: [field_qualifier]        |
 6|field_qual|Trying production: [not_null]         |
 6|field_qual|Trying subrule: [not_null]            |
 7| not_null |Trying rule: [not_null]               |
 7| not_null |Trying production: [/not/i /null/i]   |
 7| not_null |Trying terminal: [/not/i]             |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |Trying production: [/null/i]          |
 7| not_null |Trying terminal: [/null/i]            |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [not_null]>>  |
 6|field_qual|Trying production: [default_val]      |
 6|field_qual|Trying subrule: [default_val]         |
 7|default_va|Trying rule: [default_val]            |
 7|default_va|Trying production: [/default/i        |
  |          |CURRENT_TIMESTAMP]                    |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i string]|
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i bit]   |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i        |
  |          |/[\w\d:.-]+/]                         |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[default_val]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [auto_inc]         |
 6|field_qual|Trying subrule: [auto_inc]            |
 7| auto_inc |Trying rule: [auto_inc]               |
 7| auto_inc |Trying production: [/auto_increment/i]|
 7| auto_inc |Trying terminal: [/auto_increment/i]  |
 7| auto_inc |<<Didn't match terminal>>             |
 7| auto_inc |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [auto_inc]>>  |
 6|field_qual|Trying production: [primary_key]      |
 6|field_qual|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [unsigned]         |
 6|field_qual|Trying subrule: [unsigned]            |
 7| unsigned |Trying rule: [unsigned]               |
 7| unsigned |Trying production: [/unsigned/i]      |
 7| unsigned |Trying terminal: [/unsigned/i]        |
 7| unsigned |<<Didn't match terminal>>             |
 7| unsigned |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [unsigned]>>  |
 6|field_qual|Trying production: [/character set/i  |
  |          |WORD]                                 |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/character set/i]   |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/collate/i WORD]  |
 6|field_qual|Trying terminal: [/collate/i]         |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/on update/i]       |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/unique/i KEY]    |
 6|field_qual|Trying terminal: [/unique/i]          |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [KEY]              |
 6|field_qual|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [KEY]>>       |
 6|field_qual|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_qualifier]<< (0 times)         |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment2]                      |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment2]         |
 6|field_comm|Trying production: [/comment/i        |
  |          |/'.*?'/]                              |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/comment/i]         |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment2]<< (0 times)          |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[reference_definition]                |
 5|  field   |                                      |
 6|reference_|Trying rule: [reference_definition]   |
 6|reference_|Trying production: [/references/i     |
  |          |table_name parens_field_list          |
 6|reference_|match_type on_delete on_update]       |
 6|reference_|Trying terminal: [/references/i]      |
 6|reference_|<<Didn't match terminal>>             |
 6|reference_|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[reference_definition]<< (0 times)    |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule: [on_update]  |
 6|on_update |Trying rule: [on_update]              |
 6|on_update |Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |Trying production: [/on update/i      |
  |          |reference_option]                     |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[on_update]<< (0 times)               |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying action                         |
 5|  field   |>>Matched action<< (return value:     |
  |          |[HASH(0x4c50900)])                    |
 5|  field   |                                      |
 5|  field   |>>Matched production: [field_comment  |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]<<            |
 5|  field   |                                      |
 5|  field   |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c50900)])                    |
 5|  field   |                                      |
 5|  field   |(consumed: [  title VARCHAR(255)])    |
 4|create_def|>>Matched subrule: [field]<< (return  |
  |          |value: [HASH(0x4c50900)]              |
 4|create_def|                                      |
 4|create_def|>>Matched production: [field]<<       |
 4|create_def|>>Matched rule<< (return value:       |
  |          |[HASH(0x4c50900)])                    |
 4|create_def|                                      |
 4|create_def|(consumed: [  title VARCHAR(255)])    |
 3|  create  |>>Matched subrule:                    |
  |          |[create_definition]<< (return value:  |
 3|  create  |[HASH(0x4c50900)]                     |
 3|  create  |Trying terminal: [/,/]                |
 3|  create  |>>Matched terminal<< (return value:   |
  |          |[,])                                  |
 3|  create  |                                      |
 3|  create  |                                      |"\n rating VARCHAR(5)\n);"
 3|  create  |Trying subrule: [create_definition]   |
 4|create_def|Trying rule: [create_definition]      |
 4|create_def|Trying production: [constraint]       |
 4|create_def|Trying subrule: [constraint]          |
 5|constraint|Trying rule: [constraint]             |
 5|constraint|Trying production: [primary_key_def]  |
 5|constraint|Trying subrule: [primary_key_def]     |
 6|primary_ke|Trying rule: [primary_key_def]        |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_type '(' <leftop:               |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|Trying production: [primary_key       |
  |          |index_name_not_using '(' <leftop:     |
 6|primary_ke|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')' index_type]  |
 6|primary_ke|                                      |
 6|primary_ke|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|primary_ke|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|primary_ke|                                      |
 6|primary_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[primary_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [unique_key_def]   |
 5|constraint|Trying subrule: [unique_key_def]      |
 6|unique_key|Trying rule: [unique_key_def]         |
 6|unique_key|Trying production: [UNIQUE KEY        |
  |          |index_name_not_using index_type '('   |
 6|unique_key|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|unique_key|                                      |
 6|unique_key|Trying subrule: [UNIQUE]              |
 7|  UNIQUE  |Trying rule: [UNIQUE]                 |
 7|  UNIQUE  |Trying production: [/unique/i]        |
 7|  UNIQUE  |Trying terminal: [/unique/i]          |
 7|  UNIQUE  |<<Didn't match terminal>>             |
 7|  UNIQUE  |<<Didn't match rule>>                 |
 6|unique_key|<<Didn't match subrule: [UNIQUE]>>    |
 6|unique_key|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[unique_key_def]>>                    |
 5|constraint|                                      |
 5|constraint|Trying production: [foreign_key_def]  |
 5|constraint|Trying subrule: [foreign_key_def]     |
 6|foreign_ke|Trying rule: [foreign_key_def]        |
 6|foreign_ke|Trying production:                    |
  |          |[foreign_key_def_begin                |
 6|foreign_ke|parens_field_list                     |
  |          |reference_definition]                 |
 6|foreign_ke|                                      |
 6|foreign_ke|Trying subrule:                       |
  |          |[foreign_key_def_begin]               |
 6|foreign_ke|                                      |
 7|foreign_ke|Trying rule: [foreign_key_def_begin]  |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i WORD]                  |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i NAME|
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/constraint/i     |
  |          |/foreign key/i]                       |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/constraint/i]      |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i    |
  |          |WORD]                                 |
 7|foreign_ke|                                      |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|Trying production: [/foreign key/i]   |
 7|foreign_ke|Trying terminal: [/foreign key/i]     |
 7|foreign_ke|<<Didn't match terminal>>             |
 7|foreign_ke|<<Didn't match rule>>                 |
 6|foreign_ke|<<Didn't match subrule:               |
  |          |[foreign_key_def_begin]>>             |
 6|foreign_ke|                                      |
 6|foreign_ke|<<Didn't match rule>>                 |
 5|constraint|<<Didn't match subrule:               |
  |          |[foreign_key_def]>>                   |
 5|constraint|                                      |
 5|constraint|Trying production: [<error...>]       |
 5|constraint|Trying directive: [<error...>]        |
 5|constraint|<<Didn't match directive>>            |
 5|constraint|<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [constraint]>>|
 4|create_def|Trying production: [index]            |
 4|create_def|Trying subrule: [index]               |
 5|  index   |Trying rule: [index]                  |
 5|  index   |Trying production: [normal_index]     |
 5|  index   |Trying subrule: [normal_index]        |
 6|normal_ind|Trying rule: [normal_index]           |
 6|normal_ind|Trying production: [KEY               |
  |          |index_name_not_using index_type '('   |
 6|normal_ind|<leftop: name_with_opt_paren /,/      |
  |          |name_with_opt_paren> ')' index_type]  |
 6|normal_ind|                                      |
 6|normal_ind|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|normal_ind|<<Didn't match subrule: [KEY]>>       |
 6|normal_ind|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[normal_index]>>                      |
 5|  index   |                                      |
 5|  index   |Trying production: [fulltext_index]   |
 5|  index   |Trying subrule: [fulltext_index]      |
 6|fulltext_i|Trying rule: [fulltext_index]         |
 6|fulltext_i|Trying production: [/fulltext/i KEY   |
  |          |index_name '(' <leftop:               |
 6|fulltext_i|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|fulltext_i|                                      |
 6|fulltext_i|Trying terminal: [/fulltext/i]        |
 6|fulltext_i|<<Didn't match terminal>>             |
 6|fulltext_i|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[fulltext_index]>>                    |
 5|  index   |                                      |
 5|  index   |Trying production: [spatial_index]    |
 5|  index   |Trying subrule: [spatial_index]       |
 6|spatial_in|Trying rule: [spatial_index]          |
 6|spatial_in|Trying production: [/spatial/i KEY    |
  |          |index_name '(' <leftop:               |
 6|spatial_in|name_with_opt_paren /,/               |
  |          |name_with_opt_paren> ')']             |
 6|spatial_in|                                      |
 6|spatial_in|Trying terminal: [/spatial/i]         |
 6|spatial_in|<<Didn't match terminal>>             |
 6|spatial_in|<<Didn't match rule>>                 |
 5|  index   |<<Didn't match subrule:               |
  |          |[spatial_index]>>                     |
 5|  index   |                                      |
 5|  index   |Trying production: [<error...>]       |
 5|  index   |Trying directive: [<error...>]        |
 5|  index   |<<Didn't match directive>>            |
 5|  index   |<<Didn't match rule>>                 |
 4|create_def|<<Didn't match subrule: [index]>>     |
 4|create_def|Trying production: [field]            |
 4|create_def|Trying subrule: [field]               |
 5|  field   |Trying rule: [field]                  |
 5|  field   |Trying production: [field_comment     |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]              |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying subrule: [field_name]          |
 6|field_name|Trying rule: [field_name]             |
 6|field_name|Trying production: [NAME]             |
 6|field_name|Trying subrule: [NAME]                |
 7|   NAME   |Trying rule: [NAME]                   |
 7|   NAME   |Trying production: [QUOTED_NAME]      |
 7|   NAME   |Trying subrule: [QUOTED_NAME]         |
 8|QUOTED_NAM|Trying rule: [QUOTED_NAME]            |
 8|QUOTED_NAM|Trying production: [BACKTICK /[^`]+/  |
  |          |BACKTICK]                             |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [BACKTICK]            |
 9| BACKTICK |Trying rule: [BACKTICK]               |
 9| BACKTICK |Trying production: ['`']              |
 9| BACKTICK |Trying terminal: ['`']                |
 9| BACKTICK |<<Didn't match terminal>>             |
 9| BACKTICK |<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule: [BACKTICK]>>  |
 8|QUOTED_NAM|Trying production: [DOUBLE_QUOTE      |
  |          |/[^"]+/ DOUBLE_QUOTE]                 |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|Trying subrule: [DOUBLE_QUOTE]        |
 9|DOUBLE_QUO|Trying rule: [DOUBLE_QUOTE]           |
 9|DOUBLE_QUO|Trying production: ['"']              |
 9|DOUBLE_QUO|Trying terminal: ['"']                |
 9|DOUBLE_QUO|<<Didn't match terminal>>             |
 9|DOUBLE_QUO|<<Didn't match rule>>                 |
 8|QUOTED_NAM|<<Didn't match subrule:               |
  |          |[DOUBLE_QUOTE]>>                      |
 8|QUOTED_NAM|                                      |
 8|QUOTED_NAM|<<Didn't match rule>>                 |
 7|   NAME   |<<Didn't match subrule:               |
  |          |[QUOTED_NAME]>>                       |
 7|   NAME   |                                      |
 7|   NAME   |Trying production: [/\w+/]            |
 7|   NAME   |Trying terminal: [/\w+/]              |
 7|   NAME   |>>Matched terminal<< (return value:   |
  |          |[rating])                             |
 7|   NAME   |                                      |
 7|   NAME   |                                      |" VARCHAR(5)\n);"
 7|   NAME   |>>Matched production: [/\w+/]<<       |
 7|   NAME   |>>Matched rule<< (return value:       |
  |          |[rating])                             |
 7|   NAME   |                                      |
 7|   NAME   |(consumed: [  rating])                |
 6|field_name|>>Matched subrule: [NAME]<< (return   |
  |          |value: [rating]                       |
 6|field_name|                                      |
 6|field_name|>>Matched production: [NAME]<<        |
 6|field_name|>>Matched rule<< (return value:       |
  |          |[rating])                             |
 6|field_name|                                      |
 6|field_name|(consumed: [  rating])                |
 5|  field   |>>Matched subrule: [field_name]<<     |
  |          |(return value: [rating]               |
 5|  field   |                                      |
 5|  field   |Trying subrule: [data_type]           |
 6|data_type |Trying rule: [data_type]              |
 6|data_type |Trying production: [WORD              |
  |          |parens_value_list type_qualifier]     |
 6|data_type |                                      |
 6|data_type |Trying subrule: [WORD]                |
 7|   WORD   |Trying rule: [WORD]                   |
 7|   WORD   |Trying production: [/\w+/]            |
 7|   WORD   |Trying terminal: [/\w+/]              |
 7|   WORD   |>>Matched terminal<< (return value:   |
  |          |[VARCHAR])                            |
 7|   WORD   |                                      |
 7|   WORD   |                                      |"(5)\n);"
 7|   WORD   |>>Matched production: [/\w+/]<<       |
 7|   WORD   |>>Matched rule<< (return value:       |
  |          |[VARCHAR])                            |
 7|   WORD   |                                      |
 7|   WORD   |(consumed: [ VARCHAR])                |
 6|data_type |>>Matched subrule: [WORD]<< (return   |
  |          |value: [VARCHAR]                      |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[parens_value_list]                   |
 6|data_type |                                      |
 7|parens_val|Trying rule: [parens_value_list]      |
 7|parens_val|Trying production: ['(' <leftop: VALUE|
  |          |/,/ VALUE> ')']                       |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: ['(']                |
 7|parens_val|>>Matched terminal<< (return value:   |
  |          |[(])                                  |
 7|parens_val|                                      |
 7|parens_val|                                      |"5)\n);"
 7|parens_val|Trying operator: [<leftop: VALUE /,/  |
  |          |VALUE>]                               |
 7|parens_val|                                      |
 7|parens_val|Trying subrule: [VALUE]               |
 8|  VALUE   |Trying rule: [VALUE]                  |
 8|  VALUE   |Trying production: [/[-               |
  |          |+]?\.?\d+(?:[eE]\d+)?/]               |
 8|  VALUE   |                                      |
 8|  VALUE   |Trying terminal: [/[-                 |
  |          |+]?\.?\d+(?:[eE]\d+)?/]               |
 8|  VALUE   |                                      |
 8|  VALUE   |>>Matched terminal<< (return value:   |
  |          |[5])                                  |
 8|  VALUE   |                                      |
 8|  VALUE   |                                      |")\n);"
 8|  VALUE   |Trying action                         |
 8|  VALUE   |>>Matched action<< (return value: [5])|
 8|  VALUE   |>>Matched production: [/[-            |
  |          |+]?\.?\d+(?:[eE]\d+)?/]<<             |
 8|  VALUE   |                                      |
 8|  VALUE   |>>Matched rule<< (return value: [5])  |
 8|  VALUE   |(consumed: [5])                       |
 7|parens_val|>>Matched subrule: [VALUE]<< (return  |
  |          |value: [5]                            |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: [/,/]                |
 7|parens_val|<<Didn't match terminal>>             |
 7|parens_val|>>Matched operator: [<leftop: VALUE   |
  |          |/,/ VALUE>]<< (return value: [5]      |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: [')']                |
 7|parens_val|>>Matched terminal<< (return value:   |
  |          |[)])                                  |
 7|parens_val|                                      |
 7|parens_val|                                      |"\n);"
 7|parens_val|Trying action                         |
 7|parens_val|>>Matched action<< (return value:     |
  |          |[ARRAY(0x4c53738)])                   |
 7|parens_val|                                      |
 7|parens_val|>>Matched production: ['(' <leftop:   |
  |          |VALUE /,/ VALUE> ')']<<               |
 7|parens_val|                                      |
 7|parens_val|>>Matched rule<< (return value:       |
  |          |[ARRAY(0x4c53738)])                   |
 7|parens_val|                                      |
 7|parens_val|(consumed: [(5)])                     |
 7|parens_val|Trying rule: [parens_value_list]      |
 7|parens_val|Trying production: ['(' <leftop: VALUE|
  |          |/,/ VALUE> ')']                       |
 7|parens_val|                                      |
 7|parens_val|Trying terminal: ['(']                |
 7|parens_val|<<Didn't match terminal>>             |
 7|parens_val|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[parens_value_list]<< (1 times)       |
 6|data_type |                                      |
 6|data_type |Trying repeated subrule:              |
  |          |[type_qualifier]                      |
 6|data_type |                                      |
 7|type_quali|Trying rule: [type_qualifier]         |
 7|type_quali|Trying production:                    |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|Trying terminal:                      |
  |          |[/(BINARY|UNSIGNED|ZEROFILL)/i]       |
 7|type_quali|                                      |
 7|type_quali|<<Didn't match terminal>>             |
 7|type_quali|<<Didn't match rule>>                 |
 6|data_type |>>Matched repeated subrule:           |
  |          |[type_qualifier]<< (0 times)          |
 6|data_type |                                      |
 6|data_type |Trying action                         |
 6|data_type |>>Matched action<< (return value:     |
  |          |[HASH(0x4c533d8)])                    |
 6|data_type |                                      |
 6|data_type |>>Matched production: [WORD           |
  |          |parens_value_list type_qualifier]<<   |
 6|data_type |                                      |
 6|data_type |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c533d8)])                    |
 6|data_type |                                      |
 6|data_type |(consumed: [ VARCHAR(5)])             |
 5|  field   |>>Matched subrule: [data_type]<<      |
  |          |(return value: [HASH(0x4c533d8)]      |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_qualifier]                     |
 5|  field   |                                      |
 6|field_qual|Trying rule: [field_qualifier]        |
 6|field_qual|Trying production: [not_null]         |
 6|field_qual|Trying subrule: [not_null]            |
 7| not_null |Trying rule: [not_null]               |
 7| not_null |Trying production: [/not/i /null/i]   |
 7| not_null |Trying terminal: [/not/i]             |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |Trying production: [/null/i]          |
 7| not_null |Trying terminal: [/null/i]            |
 7| not_null |<<Didn't match terminal>>             |
 7| not_null |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [not_null]>>  |
 6|field_qual|Trying production: [default_val]      |
 6|field_qual|Trying subrule: [default_val]         |
 7|default_va|Trying rule: [default_val]            |
 7|default_va|Trying production: [/default/i        |
  |          |CURRENT_TIMESTAMP]                    |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i string]|
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i bit]   |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|Trying production: [/default/i        |
  |          |/[\w\d:.-]+/]                         |
 7|default_va|                                      |
 7|default_va|Trying terminal: [/default/i]         |
 7|default_va|<<Didn't match terminal>>             |
 7|default_va|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[default_val]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [auto_inc]         |
 6|field_qual|Trying subrule: [auto_inc]            |
 7| auto_inc |Trying rule: [auto_inc]               |
 7| auto_inc |Trying production: [/auto_increment/i]|
 7| auto_inc |Trying terminal: [/auto_increment/i]  |
 7| auto_inc |<<Didn't match terminal>>             |
 7| auto_inc |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [auto_inc]>>  |
 6|field_qual|Trying production: [primary_key]      |
 6|field_qual|Trying subrule: [primary_key]         |
 7|primary_ke|Trying rule: [primary_key]            |
 7|primary_ke|Trying production: [/primary/i /key/i]|
 7|primary_ke|Trying terminal: [/primary/i]         |
 7|primary_ke|<<Didn't match terminal>>             |
 7|primary_ke|<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule:               |
  |          |[primary_key]>>                       |
 6|field_qual|                                      |
 6|field_qual|Trying production: [unsigned]         |
 6|field_qual|Trying subrule: [unsigned]            |
 7| unsigned |Trying rule: [unsigned]               |
 7| unsigned |Trying production: [/unsigned/i]      |
 7| unsigned |Trying terminal: [/unsigned/i]        |
 7| unsigned |<<Didn't match terminal>>             |
 7| unsigned |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [unsigned]>>  |
 6|field_qual|Trying production: [/character set/i  |
  |          |WORD]                                 |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/character set/i]   |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/collate/i WORD]  |
 6|field_qual|Trying terminal: [/collate/i]         |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|field_qual|                                      |
 6|field_qual|Trying terminal: [/on update/i]       |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [/unique/i KEY]    |
 6|field_qual|Trying terminal: [/unique/i]          |
 6|field_qual|<<Didn't match terminal>>             |
 6|field_qual|Trying production: [KEY]              |
 6|field_qual|Trying subrule: [KEY]                 |
 7|   KEY    |Trying rule: [KEY]                    |
 7|   KEY    |Trying production: [/key/i]           |
 7|   KEY    |Trying terminal: [/key/i]             |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |Trying production: [/index/i]         |
 7|   KEY    |Trying terminal: [/index/i]           |
 7|   KEY    |<<Didn't match terminal>>             |
 7|   KEY    |<<Didn't match rule>>                 |
 6|field_qual|<<Didn't match subrule: [KEY]>>       |
 6|field_qual|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_qualifier]<< (0 times)         |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment2]                      |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment2]         |
 6|field_comm|Trying production: [/comment/i        |
  |          |/'.*?'/]                              |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/comment/i]         |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment2]<< (0 times)          |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[reference_definition]                |
 5|  field   |                                      |
 6|reference_|Trying rule: [reference_definition]   |
 6|reference_|Trying production: [/references/i     |
  |          |table_name parens_field_list          |
 6|reference_|match_type on_delete on_update]       |
 6|reference_|Trying terminal: [/references/i]      |
 6|reference_|<<Didn't match terminal>>             |
 6|reference_|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[reference_definition]<< (0 times)    |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule: [on_update]  |
 6|on_update |Trying rule: [on_update]              |
 6|on_update |Trying production: [/on update/i      |
  |          |CURRENT_TIMESTAMP]                    |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |Trying production: [/on update/i      |
  |          |reference_option]                     |
 6|on_update |                                      |
 6|on_update |Trying terminal: [/on update/i]       |
 6|on_update |<<Didn't match terminal>>             |
 6|on_update |<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[on_update]<< (0 times)               |
 5|  field   |                                      |
 5|  field   |Trying repeated subrule:              |
  |          |[field_comment]                       |
 5|  field   |                                      |
 6|field_comm|Trying rule: [field_comment]          |
 6|field_comm|Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 6|field_comm|                                      |
 6|field_comm|<<Didn't match terminal>>             |
 6|field_comm|<<Didn't match rule>>                 |
 5|  field   |>>Matched repeated subrule:           |
  |          |[field_comment]<< (0 times)           |
 5|  field   |                                      |
 5|  field   |Trying action                         |
 5|  field   |>>Matched action<< (return value:     |
  |          |[HASH(0x4c53318)])                    |
 5|  field   |                                      |
 5|  field   |>>Matched production: [field_comment  |
  |          |field_name data_type field_qualifier  |
 5|  field   |field_comment2 reference_definition   |
  |          |on_update field_comment]<<            |
 5|  field   |                                      |
 5|  field   |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c53318)])                    |
 5|  field   |                                      |
 5|  field   |(consumed: [  rating VARCHAR(5)])     |
 4|create_def|>>Matched subrule: [field]<< (return  |
  |          |value: [HASH(0x4c53318)]              |
 4|create_def|                                      |
 4|create_def|>>Matched production: [field]<<       |
 4|create_def|>>Matched rule<< (return value:       |
  |          |[HASH(0x4c53318)])                    |
 4|create_def|                                      |
 4|create_def|(consumed: [  rating VARCHAR(5)])     |
 3|  create  |>>Matched subrule:                    |
  |          |[create_definition]<< (return value:  |
 3|  create  |[HASH(0x4c53318)]                     |
 3|  create  |Trying terminal: [/,/]                |
 3|  create  |<<Didn't match terminal>>             |
 3|  create  |>>Matched operator: [<leftop:         |
  |          |create_definition /,/                 |
 3|  create  |create_definition>]<< (return value:  |
  |          |[HASH(0x4c53198) HASH(0x4c50900)      |
 3|  create  |HASH(0x4c53318)]                      |
 3|  create  |Trying terminal: [/(,\s*)?\)/]        |
 3|  create  |>>Matched terminal<< (return value:   |
  |          |[)])                                  |
 3|  create  |                                      |
 3|  create  |                                      |";"
 3|  create  |Trying repeated subrule:              |
  |          |[table_option]                        |
 3|  create  |                                      |
 4|table_opti|Trying rule: [table_option]           |
 4|table_opti|Trying production: [/comment/i /=/    |
  |          |/'.*?'/]                              |
 4|table_opti|                                      |
 4|table_opti|Trying terminal: [/comment/i]         |
 4|table_opti|<<Didn't match terminal>>             |
 4|table_opti|Trying production: [/(default         |
  |          |)?(charset|character set)/i /\s*=?\s*/|
 4|table_opti|WORD]                                 |
 4|table_opti|Trying terminal: [/(default           |
  |          |)?(charset|character set)/i]          |
 4|table_opti|                                      |
 4|table_opti|<<Didn't match terminal>>             |
 4|table_opti|Trying production: [/collate/i WORD]  |
 4|table_opti|Trying terminal: [/collate/i]         |
 4|table_opti|<<Didn't match terminal>>             |
 4|table_opti|Trying production: [/union/i /\s*=\s*/|
  |          |'(' <leftop: table_name /,/           |
 4|table_opti|table_name> ')']                      |
 4|table_opti|Trying terminal: [/union/i]           |
 4|table_opti|<<Didn't match terminal>>             |
 4|table_opti|Trying production: [WORD /\s*=\s*/    |
  |          |MAYBE_QUOTED_WORD]                    |
 4|table_opti|                                      |
 4|table_opti|Trying subrule: [WORD]                |
 5|   WORD   |Trying rule: [WORD]                   |
 5|   WORD   |Trying production: [/\w+/]            |
 5|   WORD   |Trying terminal: [/\w+/]              |
 5|   WORD   |<<Didn't match terminal>>             |
 5|   WORD   |<<Didn't match rule>>                 |
 4|table_opti|<<Didn't match subrule: [WORD]>>      |
 4|table_opti|<<Didn't match rule>>                 |
 3|  create  |>>Matched repeated subrule:           |
  |          |[table_option]<< (0 times)            |
 3|  create  |                                      |
 3|  create  |Trying terminal: ['$delimiter']       |
 3|  create  |>>Matched terminal<< (return value:   |
  |          |[;])                                  |
 3|  create  |                                      |
 3|  create  |Trying action                         |
 3|  create  |>>Matched action<< (return value: [1])|
 3|  create  |>>Matched production: [CREATE         |
  |          |TEMPORARY TABLE opt_if_not_exists     |
 3|  create  |table_name '(' <leftop:               |
  |          |create_definition /,/                 |
 3|  create  |create_definition> /(,\s*)?\)/        |
  |          |table_option '$delimiter']<<          |
 3|  create  |                                      |
 3|  create  |>>Matched rule<< (return value: [1])  |
 3|  create  |(consumed: [])                        |
 2|statement |>>Matched subrule: [create]<< (return |
  |          |value: [1]                            |
 2|statement |                                      |
 2|statement |>>Matched production: [create]<<      |
 2|statement |>>Matched rule<< (return value: [1])  |
 2|statement |(consumed: [])                        |
 2|statement |Trying rule: [statement]              |
 2|statement |Trying production: [comment]          |
 2|statement |Trying subrule: [comment]             |
 3| comment  |Trying rule: [comment]                |
 3| comment  |Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |Trying production: [m{ / \* (?! \!)   |
  |          |.*? \* / }xs]                         |
 3| comment  |                                      |
 3| comment  |Trying terminal: [m{ / \* (?! \!) .*? |
  |          |\* / }xs]                             |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [comment]>>   |
 2|statement |Trying production: [use]              |
 2|statement |Trying subrule: [use]                 |
 3|   use    |Trying rule: [use]                    |
 3|   use    |Trying production: [/use/i WORD       |
  |          |'$delimiter']                         |
 3|   use    |                                      |
 3|   use    |Trying terminal: [/use/i]             |
 3|   use    |<<Didn't match terminal>>             |
 3|   use    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [use]>>       |
 2|statement |Trying production: [set]              |
 2|statement |Trying subrule: [set]                 |
 3|   set    |Trying rule: [set]                    |
 3|   set    |Trying production: [/set/i            |
  |          |not_delimiter '$delimiter']           |
 3|   set    |                                      |
 3|   set    |Trying terminal: [/set/i]             |
 3|   set    |<<Didn't match terminal>>             |
 3|   set    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [set]>>       |
 2|statement |Trying production: [drop]             |
 2|statement |Trying subrule: [drop]                |
 3|   drop   |Trying rule: [drop]                   |
 3|   drop   |Trying production: [/drop/i TABLE     |
  |          |not_delimiter '$delimiter']           |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |Trying production: [/drop/i WORD      |
  |          |'$delimiter']                         |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [drop]>>      |
 2|statement |Trying production: [create]           |
 2|statement |Trying subrule: [create]              |
 3|  create  |Trying rule: [create]                 |
 3|  create  |Trying production: [CREATE /database/i|
  |          |WORD '$delimiter']                    |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE TEMPORARY  |
  |          |TABLE opt_if_not_exists table_name '('|
 3|  create  |<leftop: create_definition /,/        |
  |          |create_definition> /(,\s*)?\)/        |
 3|  create  |table_option '$delimiter']            |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE UNIQUE     |
  |          |/(index|key)/i index_name /on/i       |
 3|  create  |table_name '(' <leftop: field_name /,/|
  |          |field_name> ')' '$delimiter']         |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE /trigger/i |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE PROCEDURE  |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE or_replace |
  |          |create_view_option /view/i NAME /as/i |
 3|  create  |view_select_statement '$delimiter']   |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [create]>>    |
 2|statement |Trying production: [alter]            |
 2|statement |Trying subrule: [alter]               |
 3|  alter   |Trying rule: [alter]                  |
 3|  alter   |Trying production: [ALTER TABLE       |
  |          |table_name <leftop:                   |
 3|  alter   |alter_specification /,/               |
  |          |alter_specification> '$delimiter']    |
 3|  alter   |                                      |
 3|  alter   |Trying subrule: [ALTER]               |
 4|  ALTER   |Trying rule: [ALTER]                  |
 4|  ALTER   |Trying production: [/alter/i]         |
 4|  ALTER   |Trying terminal: [/alter/i]           |
 4|  ALTER   |<<Didn't match terminal>>             |
 4|  ALTER   |<<Didn't match rule>>                 |
 3|  alter   |<<Didn't match subrule: [ALTER]>>     |
 3|  alter   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [alter]>>     |
 2|statement |Trying production: [insert]           |
 2|statement |Trying subrule: [insert]              |
 3|  insert  |Trying rule: [insert]                 |
 3|  insert  |Trying production: [/insert/i         |
  |          |statement_body '$delimiter']          |
 3|  insert  |                                      |
 3|  insert  |Trying terminal: [/insert/i]          |
 3|  insert  |<<Didn't match terminal>>             |
 3|  insert  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [insert]>>    |
 2|statement |Trying production: [delimiter]        |
 2|statement |Trying subrule: [delimiter]           |
 3|delimiter |Trying rule: [delimiter]              |
 3|delimiter |Trying production: [/delimiter/i      |
  |          |/[\S]+/]                              |
 3|delimiter |                                      |
 3|delimiter |Trying terminal: [/delimiter/i]       |
 3|delimiter |<<Didn't match terminal>>             |
 3|delimiter |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [delimiter]>> |
 2|statement |Trying production: [empty_statement]  |
 2|statement |Trying subrule: [empty_statement]     |
 3|empty_stat|Trying rule: [empty_statement]        |
 3|empty_stat|Trying production: ['$delimiter']     |
 3|empty_stat|Trying terminal: ['$delimiter']       |
 3|empty_stat|<<Didn't match terminal>>             |
 3|empty_stat|<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule:               |
  |          |[empty_statement]>>                   |
 2|statement |                                      |
 2|statement |Trying production: [<error...>]       |
 2|statement |Trying directive: [<error...>]        |
 2|statement |<<Didn't match directive>>            |
 2|statement |<<Didn't match rule>>                 |
 1|startrule |>>Matched repeated subrule:           |
  |          |[statement]<< (1 times)               |
 1|startrule |                                      |
 1|startrule |Trying subrule: [eofile]              |
 2|  eofile  |Trying rule: [eofile]                 |
 2|  eofile  |Trying production: [/^\Z/]            |
 2|  eofile  |Trying terminal: [/^\Z/]              |
 2|  eofile  |>>Matched terminal<< (return value:   |
  |          |[])                                   |
 2|  eofile  |                                      |
 2|  eofile  |>>Matched production: [/^\Z/]<<       |
 2|  eofile  |>>Matched rule<< (return value: [])   |
 2|  eofile  |(consumed: [])                        |
 1|startrule |>>Matched subrule: [eofile]<< (return |
  |          |value: []                             |
 1|startrule |                                      |
 1|startrule |Trying action                         |
 1|startrule |>>Matched action<< (return value:     |
  |          |[HASH(0x4c4fe18)])                    |
 1|startrule |                                      |
 1|startrule |>>Matched production: [statement      |
  |          |eofile]<<                             |
 1|startrule |                                      |
 1|startrule |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c4fe18)])                    |
 1|startrule |                                      |
 1|startrule |(consumed: [])                        |
<--BEGIN TRANSACTION;

CREATE TABLE film (
  filmid INTEGER PRIMARY KEY NOT NULL,
  title VARCHAR(255),
  rating VARCHAR(5)
);

COMMIT;

-->
INSERT INTO film (title, rating) VALUES ('Veronique', 15);
    Parse::RecDescent: Treating "{ my ( $database_name, %tables, $table_order,
                       @table_comments, %views, $view_order, %procedures,
                       $proc_order ); my $delimiter = ';'; }" as an action
    Parse::RecDescent: Treating "#" as a comment
    Parse::RecDescent: Treating "# The "eofile" rule makes the parser fail if
                       any "statement" rule" as a comment
    Parse::RecDescent: Treating "# fails. Otherwise, the first successful
                       match by a "statement"" as a comment
    Parse::RecDescent: Treating "# won't cause the failure needed to know that
                       the parse, as a whole," as a comment
    Parse::RecDescent: Treating "# failed. -ky" as a comment
    Parse::RecDescent: Treating "#" as a comment
    Parse::RecDescent: Treating "startrule :" as a rule declaration
    Parse::RecDescent: Treating "statement(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "eofile" as a subrule match
    Parse::RecDescent: Treating "{ { database_name => $database_name, tables
                       => \%tables, views => \%views, procedures =>
                       \%procedures, } }" as an action
    Parse::RecDescent: Treating "eofile :" as a rule declaration
    Parse::RecDescent: Treating "/^\Z/" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement :" as a rule declaration
    Parse::RecDescent: Treating "comment" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "use" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "set" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "drop" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "create" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "alter" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "insert" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "delimiter" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "empty_statement" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "use :" as a rule declaration
    Parse::RecDescent: Treating "/use/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ $database_name = $item[2]; @table_comments
                       = (); }" as an action
    Parse::RecDescent: Treating "set :" as a rule declaration
    Parse::RecDescent: Treating "/set/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "drop :" as a rule declaration
    Parse::RecDescent: Treating "/drop/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "drop :" as a rule declaration
    Parse::RecDescent: Treating "/drop/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "bit:" as a rule declaration
    Parse::RecDescent: Treating "/(b'[01]{1,64}')/" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(b"[01]{1,64}")/" as a /../ pattern terminal
    Parse::RecDescent: Treating "string :" as a rule declaration
    Parse::RecDescent: Treating "# MySQL strings, unlike common SQL strings,
                       can be double-quoted or" as a comment
    Parse::RecDescent: Treating "# single-quoted, and you can escape the
                       delmiters by doubling (but only the" as a comment
    Parse::RecDescent: Treating "# delimiter) or by backslashing." as a
                       comment
    Parse::RecDescent: Treating "/'(\\.|''|[^\\\'])*'/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/"(\\.|""|[^\\\"])*"/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "# For reference, std sql str:
                       /(?:(?:\')(?:[^\']*(?:(?:\'\')[^\']*)*)(?:\'))//" as a
                       comment
    Parse::RecDescent: Treating "nonstring :" as a rule declaration
    Parse::RecDescent: Treating "/[^;\'"]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement_body :" as a rule declaration
    Parse::RecDescent: Treating "string" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "nonstring" as a subrule match
    Parse::RecDescent: Treating "insert :" as a rule declaration
    Parse::RecDescent: Treating "/insert/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "statement_body(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/delimiter/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/[\S]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $delimiter = $item[2] }" as an action
    Parse::RecDescent: Treating "empty_statement :" as a rule declaration
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "alter :" as a rule declaration
    Parse::RecDescent: Treating "ALTER" as a subrule match
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "alter_specification(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "alter_specification" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "alter_specification" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ my $table_name = $item{'table_name'}; die
                       "Cannot ALTER table '$table_name'; it does not exist"
                       unless $tables{ $table_name }; for my $definition ( @{
                       $item[4] } ) { $definition->{'extra'}->{'alter'} = 1;
                       push @{ $tables{ $table_name }{'constraints'} },
                       $definition; } }" as an action
    Parse::RecDescent: Treating "alter_specification :" as a rule declaration
    Parse::RecDescent: Treating "ADD" as a subrule match
    Parse::RecDescent: Treating "foreign_key_def" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "/database/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = () }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "TEMPORARY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "TABLE" as a subrule match
    Parse::RecDescent: Treating "opt_if_not_exists(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "create_definition(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "create_definition" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "create_definition" as a subrule match
    Parse::RecDescent: Treating "/(,\s*)?\)/" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_option(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ my $table_name = $item{'table_name'}; die
                       "There is more than one definition for $table_name" if
                       ($tables{$table_name}); $tables{ $table_name }{'order'}
                       = ++$table_order; $tables{ $table_name }{'table_name'}
                       = $table_name; if ( @table_comments ) { $tables{
                       $table_name }{'comments'} = [ @table_comments ];
                       @table_comments = (); } my $i = 1; for my $definition (
                       @{ $item[7] } ) { if ( $definition->{'supertype'} eq
                       'field' ) { my $field_name = $definition->{'name'};
                       $tables{ $table_name }{'fields'}{ $field_name } = {
                       %$definition, order => $i }; $i++; if ( $definition-
                       >{'is_primary_key'} ) { push @{ $tables{ $table_name
                       }{'constraints'} }, { type => 'primary_key', fields =>
                       [ $field_name ], } ; } } elsif ( $definition-
                       >{'supertype'} eq 'constraint' ) { push @{ $tables{
                       $table_name }{'constraints'} }, $definition; } elsif (
                       $definition->{'supertype'} eq 'index' ) { push @{
                       $tables{ $table_name }{'indices'} }, $definition; } }
                       if ( my @options = @{ $item{'table_option(s?)'} } ) {
                       for my $option ( @options ) { my ( $key, $value ) =
                       each %$option; if ( $key eq 'comment' ) { push @{
                       $tables{ $table_name }{'comments'} }, $value; } else {
                       push @{ $tables{ $table_name }{'table_options'} },
                       $option; } } } 1; }" as an action
    Parse::RecDescent: Treating "opt_if_not_exists :" as a rule declaration
    Parse::RecDescent: Treating "/if not exists/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "UNIQUE(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "/(index|key)/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "index_name" as a subrule match
    Parse::RecDescent: Treating "/on/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "field_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); push @{ $tables{
                       $item{'table_name'} }{'indices'} }, { name => $item[4],
                       type => $item[2][0] ? 'unique' : 'normal', fields =>
                       $item[8], } ; }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "/trigger/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); }" as an action
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "PROCEDURE" as a subrule match
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); my $func_name =
                       $item[3]; my $owner = ''; my $sql = "$item[1] $item[2]
                       $item[3] $item[4]"; $procedures{ $func_name }{'order'}
                       = ++$proc_order; $procedures{ $func_name }{'name'} =
                       $func_name; $procedures{ $func_name }{'owner'} =
                       $owner; $procedures{ $func_name }{'sql'} = $sql; }" as
                       an action
    Parse::RecDescent: Treating "PROCEDURE :" as a rule declaration
    Parse::RecDescent: Treating "/procedure/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/function/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "create :" as a rule declaration
    Parse::RecDescent: Treating "CREATE" as a subrule match
    Parse::RecDescent: Treating "or_replace(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "create_view_option(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "/view/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "/as/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_select_statement" as a subrule match
    Parse::RecDescent: Treating ""$delimiter"" as an interpolated literal
                       terminal
    Parse::RecDescent: Treating "{ @table_comments = (); my $view_name =
                       $item{'NAME'}; my $select_sql =
                       $item{'view_select_statement'}; my $options =
                       $item{'create_view_option(s?)'}; my $sql = join(q{ },
                       grep { defined and length } map { ref $_ eq 'ARRAY' ?
                       @$_ : $_ } $item{'CREATE'}, $item{'or_replace(?)'},
                       $options, $view_name, 'as select', join(', ', map {
                       sprintf('%s%s', $_->{'name'}, $_->{'alias'} ? ' as ' .
                       $_->{'alias'} : '' ) } @{ $select_sql->{'columns'} ||
                       [] } ), ' from ', join(', ', map { sprintf('%s%s', $_-
                       >{'name'}, $_->{'alias'} ? ' as ' . $_->{'alias'} : ''
                       ) } @{ $select_sql->{'from'}{'tables'} || [] } ),
                       $select_sql->{'from'}{'where'} ? 'where ' .
                       $select_sql->{'from'}{'where'} : '' , ); # Hack to
                       strip database from function calls in SQL $sql =~
                       s#`\w+`\.(`\w+`\()##g; $views{ $view_name }{'order'} =
                       ++$view_order; $views{ $view_name }{'name'} =
                       $view_name; $views{ $view_name }{'sql'} = $sql; $views{
                       $view_name }{'options'} = $options; $views{ $view_name
                       }{'select'} = $item{'view_select_statement'}; }" as an
                       action
    Parse::RecDescent: Treating "create_view_option :" as a rule declaration
    Parse::RecDescent: Treating "view_algorithm" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "view_sql_security" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "view_definer" as a subrule match
    Parse::RecDescent: Treating "or_replace :" as a rule declaration
    Parse::RecDescent: Treating "/or replace/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_algorithm :" as a rule declaration
    Parse::RecDescent: Treating "/algorithm/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/=/" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = "$item[1]=$item[3]"; }" as an
                       action
    Parse::RecDescent: Treating "view_definer :" as a rule declaration
    Parse::RecDescent: Treating "/definer=\S+/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_sql_security :" as a rule declaration
    Parse::RecDescent: Treating "/sql \s+ security \s+ (definer|invoker)/ixs"
                       as a /../ pattern terminal
    Parse::RecDescent: Treating "not_delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/.*?(?=$delimiter)/is" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "view_select_statement :" as a rule
                       declaration
    Parse::RecDescent: Treating "/[(]?/" as a /../ pattern terminal
    Parse::RecDescent: Treating "/select/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_column_def" as a subrule match
    Parse::RecDescent: Treating "/from/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "view_table_def" as a subrule match
    Parse::RecDescent: Treating "/[)]?/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = { columns =>
                       $item{'view_column_def'}, from =>
                       $item{'view_table_def'}, }; }" as an action
    Parse::RecDescent: Treating "view_column_def :" as a rule declaration
    Parse::RecDescent: Treating "/(.*?)(?=\bfrom\b)/ixs" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ # split on commas not in parens, # e.g.,
                       "concat_ws(\' \', first, last) as first_last" my @tmp =
                       $1 =~ /((?:[^(,]+|\(.*?\))+)/g; my @cols; for my $col (
                       @tmp ) { my ( $name, $alias ) = map { s/^\s+|\s+$//g;
                       s/[`]//g; $_ } split /\s+as\s+/i, $col; push @cols, {
                       name => $name, alias => $alias || '' }; } $return =
                       \@cols; }" as an action
    Parse::RecDescent: Treating "not_delimiter :" as a rule declaration
    Parse::RecDescent: Treating "/.*?(?=$delimiter)/is" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "view_table_def :" as a rule declaration
    Parse::RecDescent: Treating "not_delimiter" as a subrule match
    Parse::RecDescent: Treating "{ my $clause = $item[1]; my $where = $1 if
                       $clause =~ s/\bwhere \s+ (.*)//ixs; $clause =~
                       s/[)]\s*$//; my @tables; for my $tbl ( split(
                       /\s*,\s*/, $clause ) ) { my ( $name, $alias ) = split
                       /\s+as\s+/i, $tbl; push @tables, { name => $name, alias
                       => $alias || '' }; } $return = { tables => \@tables,
                       where => $where || '', }; }" as an action
    Parse::RecDescent: Treating "view_column_alias :" as a rule declaration
    Parse::RecDescent: Treating "/as/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "create_definition :" as a rule declaration
    Parse::RecDescent: Treating "constraint" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "field" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "comment" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "comment :" as a rule declaration
    Parse::RecDescent: Treating "/^\s*(?:#|-{2}).*\n/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ my $comment = $item[1]; $comment =~
                       s/^\s*(#|--)\s*//; $comment =~ s/\s*$//; $return =
                       $comment; }" as an action
    Parse::RecDescent: Treating "comment :" as a rule declaration
    Parse::RecDescent: Treating "m{ / \* (?! \!) .*? \* / }xs" as an m/../
                       pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[2]; $comment =
                       substr($comment, 0, -2); $comment =~ s/^\s*|\s*$//g;
                       $return = $comment; }" as an action
    Parse::RecDescent: Treating "comment_like_command :" as a rule declaration
    Parse::RecDescent: Treating "m{/\*!(\d+)?}s" as an m/../ pattern terminal
    Parse::RecDescent: Treating "comment_end :" as a rule declaration
    Parse::RecDescent: Treating "m{ \* / }xs" as an m/../ pattern terminal
    Parse::RecDescent: Treating "field_comment :" as a rule declaration
    Parse::RecDescent: Treating "/^\s*(?:#|-{2}).*\n/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ my $comment = $item[1]; $comment =~
                       s/^\s*(#|--)\s*//; $comment =~ s/\s*$//; $return =
                       $comment; }" as an action
    Parse::RecDescent: Treating "field_comment2 :" as a rule declaration
    Parse::RecDescent: Treating "/comment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[2]; $comment =~ s/^'//;
                       $comment =~ s/'$//; $return = $comment; }" as an action
    Parse::RecDescent: Treating "blank :" as a rule declaration
    Parse::RecDescent: Treating "/\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field :" as a rule declaration
    Parse::RecDescent: Treating "field_comment(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "data_type" as a subrule match
    Parse::RecDescent: Treating "field_qualifier(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "field_comment2(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "reference_definition(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "on_update(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "field_comment(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "{ my %qualifiers = map { %$_ } @{
                       $item{'field_qualifier(s?)'} || [] }; if ( my
                       @type_quals = @{ $item{'data_type'}{'qualifiers'} || []
                       } ) { $qualifiers{ $_ } = 1 for @type_quals; } my $null
                       = defined $qualifiers{'not_null'} ?
                       $qualifiers{'not_null'} : 1; delete
                       $qualifiers{'not_null'}; my @comments = ( @{ $item[1]
                       }, @{ $item[5] }, @{ $item[8] } ); $return = {
                       supertype => 'field', name => $item{'field_name'},
                       data_type => $item{'data_type'}{'type'}, size =>
                       $item{'data_type'}{'size'}, list =>
                       $item{'data_type'}{'list'}, null => $null, constraints
                       => $item{'reference_definition(?)'}, comments => [
                       @comments ], %qualifiers, } }" as an action
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "not_null" as a subrule match
    Parse::RecDescent: Treating "{ $return = { null => $item{'not_null'}, } }"
                       as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "default_val" as a subrule match
    Parse::RecDescent: Treating "{ $return = { default =>
                       $item{'default_val'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "auto_inc" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_auto_inc =>
                       $item{'auto_inc'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_primary_key =>
                       $item{'primary_key'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "unsigned" as a subrule match
    Parse::RecDescent: Treating "{ $return = { is_unsigned =>
                       $item{'unsigned'}, } }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/character set/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'CHARACTER SET' => $item[2], }
                       }" as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/collate/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { COLLATE => $item[2], } }" as an
                       action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'ON UPDATE' => $item[2], } }"
                       as an action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/unique/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "{ $return = { is_unique => 1, } }" as an
                       action
    Parse::RecDescent: Treating "field_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "KEY" as a subrule match
    Parse::RecDescent: Treating "{ $return = { has_index => 1, } }" as an
                       action
    Parse::RecDescent: Treating "reference_definition :" as a rule declaration
    Parse::RecDescent: Treating "/references/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "parens_field_list(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "match_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "on_delete(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "on_update(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "{ $return = { type => 'foreign_key',
                       reference_table => $item[2], reference_fields =>
                       $item[3][0], match_type => $item[4][0], on_delete =>
                       $item[5][0], on_update => $item[6][0], } }" as an
                       action
    Parse::RecDescent: Treating "match_type :" as a rule declaration
    Parse::RecDescent: Treating "/match full/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'full' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/match partial/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'partial' }" as an action
    Parse::RecDescent: Treating "on_delete :" as a rule declaration
    Parse::RecDescent: Treating "/on delete/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "reference_option" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "on_update :" as a rule declaration
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/on update/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "reference_option" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "reference_option:" as a rule declaration
    Parse::RecDescent: Treating "/restrict/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/cascade/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/set null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/no action/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/set default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $item[1] }" as an action
    Parse::RecDescent: Treating "index :" as a rule declaration
    Parse::RecDescent: Treating "normal_index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "fulltext_index" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "spatial_index" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "table_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "field_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "index_name :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "data_type :" as a rule declaration
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "parens_value_list(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "type_qualifier(s?)" as a zero-or-more subrule
                       match
    Parse::RecDescent: Treating "{ my $type = $item[1]; my $size; # field
                       size, applicable only to non-set fields my $list; # set
                       list, applicable only to sets (duh) if ( uc($type) =~
                       /^(SET|ENUM)$/ ) { $size = undef; $list = $item[2][0];
                       } else { $size = $item[2][0]; $list = []; } $return = {
                       type => $type, size => $size, list => $list, qualifiers
                       => $item[3], } }" as an action
    Parse::RecDescent: Treating "parens_field_list :" as a rule declaration
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "field_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "field_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "parens_value_list :" as a rule declaration
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "VALUE(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "VALUE" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "VALUE" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "type_qualifier :" as a rule declaration
    Parse::RecDescent: Treating "/(BINARY|UNSIGNED|ZEROFILL)/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ lc $item[1] }" as an action
    Parse::RecDescent: Treating "field_type :" as a rule declaration
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "create_index :" as a rule declaration
    Parse::RecDescent: Treating "/create/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/index/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "not_null :" as a rule declaration
    Parse::RecDescent: Treating "/not/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 0 }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/null/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 1 }" as an action
    Parse::RecDescent: Treating "unsigned :" as a rule declaration
    Parse::RecDescent: Treating "/unsigned/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = 0 }" as an action
    Parse::RecDescent: Treating "default_val :" as a rule declaration
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "string" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] =~ s/^\s*'|'\s*$//g or $item[2] =~
                       s/^\s*"|"\s*$//g; $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "bit" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] =~ s/b['"]([01]+)['"]/$1/g;
                       $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/[\w\d:.-]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $item[2]; }" as an action
    Parse::RecDescent: Treating "auto_inc :" as a rule declaration
    Parse::RecDescent: Treating "/auto_increment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 1 }" as an action
    Parse::RecDescent: Treating "primary_key :" as a rule declaration
    Parse::RecDescent: Treating "/primary/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 1 }" as an action
    Parse::RecDescent: Treating "constraint :" as a rule declaration
    Parse::RecDescent: Treating "primary_key_def" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "unique_key_def" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "foreign_key_def" as a subrule match
    Parse::RecDescent: Treating "| <error" as a new (error) production
    Parse::RecDescent: Treating "<error>" as an error marker
    Parse::RecDescent: Treating "foreign_key_def :" as a rule declaration
    Parse::RecDescent: Treating "foreign_key_def_begin" as a subrule match
    Parse::RecDescent: Treating "parens_field_list" as a subrule match
    Parse::RecDescent: Treating "reference_definition" as a subrule match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'foreign_key', name => $item[1], fields => $item[2],
                       %{ $item{'reference_definition'} }, } }" as an action
    Parse::RecDescent: Treating "foreign_key_def_begin :" as a rule
                       declaration
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[3] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/constraint/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = '' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/foreign key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = '' }" as an action
    Parse::RecDescent: Treating "primary_key_def :" as a rule declaration
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'primary_key', fields => $item[4], options =>
                       $item[2][0] || $item[6][0], }; }" as an action
    Parse::RecDescent: Treating "# In theory, and according to the doc, names
                       should not be allowed here, but" as a comment
    Parse::RecDescent: Treating "# MySQL accept (and ignores) them, so we are
                       not going to be less :)" as a comment
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "primary_key" as a subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', type
                       => 'primary_key', fields => $item[4], options =>
                       $item[6][0], }; }" as an action
    Parse::RecDescent: Treating "unique_key_def :" as a rule declaration
    Parse::RecDescent: Treating "UNIQUE" as a subrule match
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'constraint', name
                       => $item[3][0], type => 'unique', fields => $item[6],
                       options => $item[4][0] || $item[8][0], } }" as an
                       action
    Parse::RecDescent: Treating "normal_index :" as a rule declaration
    Parse::RecDescent: Treating "KEY" as a subrule match
    Parse::RecDescent: Treating "index_name_not_using(?)" as an zero-or-one
                       subrule match
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "index_type(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'normal', name => $item[2][0], fields => $item[5],
                       options => $item[3][0] || $item[7][0], } }" as an
                       action
    Parse::RecDescent: Treating "index_name_not_using :" as a rule declaration
    Parse::RecDescent: Treating "QUOTED_NAME" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(\b(?!using)\w+\b)/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ $return = ($1 =~ /^using/i) ? undef : $1 }"
                       as an action
    Parse::RecDescent: Treating "index_type :" as a rule declaration
    Parse::RecDescent: Treating "/using (btree|hash|rtree)/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ $return = uc $1 }" as an action
    Parse::RecDescent: Treating "fulltext_index :" as a rule declaration
    Parse::RecDescent: Treating "/fulltext/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'fulltext', name => $item{'index_name(?)'}[0], fields
                       => $item[5], } }" as an action
    Parse::RecDescent: Treating "spatial_index :" as a rule declaration
    Parse::RecDescent: Treating "/spatial/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY(?)" as an zero-or-one subrule match
    Parse::RecDescent: Treating "index_name(?)" as an zero-or-one subrule
                       match
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "name_with_opt_paren(s)" as a one-or-more
                       subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "name_with_opt_paren" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { supertype => 'index', type =>
                       'spatial', name => $item{'index_name(?)'}[0], fields =>
                       $item[5], } }" as an action
    Parse::RecDescent: Treating "name_with_opt_paren :" as a rule declaration
    Parse::RecDescent: Treating "NAME" as a subrule match
    Parse::RecDescent: Treating "parens_value_list(s?)" as a zero-or-more
                       subrule match
    Parse::RecDescent: Treating "{ $item[2][0] ? "$item[1]($item[2][0][0])" :
                       $item[1] }" as an action
    Parse::RecDescent: Treating "UNIQUE :" as a rule declaration
    Parse::RecDescent: Treating "/unique/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "KEY :" as a rule declaration
    Parse::RecDescent: Treating "/key/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/index/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_option :" as a rule declaration
    Parse::RecDescent: Treating "/comment/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/=/" as a /../ pattern terminal
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ my $comment = $item[3]; $comment =~ s/^'//;
                       $comment =~ s/'$//; $return = { comment => $comment };
                       }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/(default )?(charset|character set)/i" as a
                       /../ pattern terminal
    Parse::RecDescent: Treating "/\s*=?\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'CHARACTER SET' => $item[3] };
                       }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/collate/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { 'COLLATE' => $item[2] } }" as
                       an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/union/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "/\s*=\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "(" as a literal terminal
    Parse::RecDescent: Treating "table_name(s)" as a one-or-more subrule match
    Parse::RecDescent: Treating "<leftop:...>" as a left-associative operator
                       directive
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating "/,/" as a /../ pattern terminal
    Parse::RecDescent: Treating "table_name" as a subrule match
    Parse::RecDescent: Treating ")" as a literal terminal
    Parse::RecDescent: Treating "{ $return = { $item[1] => $item[4] }; }" as
                       an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "WORD" as a subrule match
    Parse::RecDescent: Treating "/\s*=\s*/" as a /../ pattern terminal
    Parse::RecDescent: Treating "MAYBE_QUOTED_WORD" as a subrule match
    Parse::RecDescent: Treating "{ $return = { $item[1] => $item[3] }; }" as
                       an action
    Parse::RecDescent: Treating "MAYBE_QUOTED_WORD:" as a rule declaration
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/'(\w+)'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $1 }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/"(\w+)"/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ $return = $1 }" as an action
    Parse::RecDescent: Treating "default :" as a rule declaration
    Parse::RecDescent: Treating "/default/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "ADD :" as a rule declaration
    Parse::RecDescent: Treating "/add/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "ALTER :" as a rule declaration
    Parse::RecDescent: Treating "/alter/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "CREATE :" as a rule declaration
    Parse::RecDescent: Treating "/create/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TEMPORARY :" as a rule declaration
    Parse::RecDescent: Treating "/temporary/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "TABLE :" as a rule declaration
    Parse::RecDescent: Treating "/table/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "WORD :" as a rule declaration
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "DIGITS :" as a rule declaration
    Parse::RecDescent: Treating "/\d+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "COMMA :" as a rule declaration
    Parse::RecDescent: Treating "," as a literal terminal
    Parse::RecDescent: Treating "BACKTICK :" as a rule declaration
    Parse::RecDescent: Treating "`" as a literal terminal
    Parse::RecDescent: Treating "DOUBLE_QUOTE:" as a rule declaration
    Parse::RecDescent: Treating """ as a literal terminal
    Parse::RecDescent: Treating "QUOTED_NAME :" as a rule declaration
    Parse::RecDescent: Treating "BACKTICK" as a subrule match
    Parse::RecDescent: Treating "/[^`]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "BACKTICK" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "DOUBLE_QUOTE" as a subrule match
    Parse::RecDescent: Treating "/[^"]+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "DOUBLE_QUOTE" as a subrule match
    Parse::RecDescent: Treating "{ $item[2] }" as an action
    Parse::RecDescent: Treating "NAME:" as a rule declaration
    Parse::RecDescent: Treating "QUOTED_NAME" as a subrule match
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/\w+/" as a /../ pattern terminal
    Parse::RecDescent: Treating "VALUE :" as a rule declaration
    Parse::RecDescent: Treating "/[-+]?\.?\d+(?:[eE]\d+)?/" as a /../ pattern
                       terminal
    Parse::RecDescent: Treating "{ $item[1] }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/'.*?'/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ # remove leading/trailing quotes my $val =
                       $item[1]; $val =~ s/^['"]|['"]$//g; $return = $val; }"
                       as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/NULL/" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ 'NULL' }" as an action
    Parse::RecDescent: Treating "# always a scalar-ref, so that it is treated
                       as a function and not quoted by consumers" as a comment
    Parse::RecDescent: Treating "CURRENT_TIMESTAMP :" as a rule declaration
    Parse::RecDescent: Treating "/current_timestamp(\(\))?/i" as a /../
                       pattern terminal
    Parse::RecDescent: Treating "{ \'CURRENT_TIMESTAMP' }" as an action
    Parse::RecDescent: Treating "|" as a new production
    Parse::RecDescent: Treating "/now\(\)/i" as a /../ pattern terminal
    Parse::RecDescent: Treating "{ \'CURRENT_TIMESTAMP' }" as an action
printing code (841063) to RD_TRACE
 1|startrule |Trying rule: [startrule]              |
 1|startrule |                                      |"\nINSERT INTO film (title,
  |          |                                      |rating) VALUES ('Veronique',
 1|startrule |                                      |15);"
 1|startrule |Trying production: [statement eofile] |
 1|startrule |Trying repeated subrule: [statement]  |
 2|statement |Trying rule: [statement]              |
 2|statement |Trying production: [comment]          |
 2|statement |Trying subrule: [comment]             |
 3| comment  |Trying rule: [comment]                |
 3| comment  |Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |Trying production: [m{ / \* (?! \!)   |
  |          |.*? \* / }xs]                         |
 3| comment  |                                      |
 3| comment  |Trying terminal: [m{ / \* (?! \!) .*? |
  |          |\* / }xs]                             |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [comment]>>   |
 2|statement |Trying production: [use]              |
 2|statement |Trying subrule: [use]                 |
 3|   use    |Trying rule: [use]                    |
 3|   use    |Trying production: [/use/i WORD       |
  |          |'$delimiter']                         |
 3|   use    |                                      |
 3|   use    |Trying terminal: [/use/i]             |
 3|   use    |<<Didn't match terminal>>             |
 3|   use    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [use]>>       |
 2|statement |Trying production: [set]              |
 2|statement |Trying subrule: [set]                 |
 3|   set    |Trying rule: [set]                    |
 3|   set    |Trying production: [/set/i            |
  |          |not_delimiter '$delimiter']           |
 3|   set    |                                      |
 3|   set    |Trying terminal: [/set/i]             |
 3|   set    |<<Didn't match terminal>>             |
 3|   set    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [set]>>       |
 2|statement |Trying production: [drop]             |
 2|statement |Trying subrule: [drop]                |
 3|   drop   |Trying rule: [drop]                   |
 3|   drop   |Trying production: [/drop/i TABLE     |
  |          |not_delimiter '$delimiter']           |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |Trying production: [/drop/i WORD      |
  |          |'$delimiter']                         |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [drop]>>      |
 2|statement |Trying production: [create]           |
 2|statement |Trying subrule: [create]              |
 3|  create  |Trying rule: [create]                 |
 3|  create  |Trying production: [CREATE /database/i|
  |          |WORD '$delimiter']                    |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE TEMPORARY  |
  |          |TABLE opt_if_not_exists table_name '('|
 3|  create  |<leftop: create_definition /,/        |
  |          |create_definition> /(,\s*)?\)/        |
 3|  create  |table_option '$delimiter']            |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE UNIQUE     |
  |          |/(index|key)/i index_name /on/i       |
 3|  create  |table_name '(' <leftop: field_name /,/|
  |          |field_name> ')' '$delimiter']         |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE /trigger/i |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE PROCEDURE  |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE or_replace |
  |          |create_view_option /view/i NAME /as/i |
 3|  create  |view_select_statement '$delimiter']   |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [create]>>    |
 2|statement |Trying production: [alter]            |
 2|statement |Trying subrule: [alter]               |
 3|  alter   |Trying rule: [alter]                  |
 3|  alter   |Trying production: [ALTER TABLE       |
  |          |table_name <leftop:                   |
 3|  alter   |alter_specification /,/               |
  |          |alter_specification> '$delimiter']    |
 3|  alter   |                                      |
 3|  alter   |Trying subrule: [ALTER]               |
 4|  ALTER   |Trying rule: [ALTER]                  |
 4|  ALTER   |Trying production: [/alter/i]         |
 4|  ALTER   |Trying terminal: [/alter/i]           |
 4|  ALTER   |<<Didn't match terminal>>             |
 4|  ALTER   |<<Didn't match rule>>                 |
 3|  alter   |<<Didn't match subrule: [ALTER]>>     |
 3|  alter   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [alter]>>     |
 2|statement |Trying production: [insert]           |
 2|statement |Trying subrule: [insert]              |
 3|  insert  |Trying rule: [insert]                 |
 3|  insert  |Trying production: [/insert/i         |
  |          |statement_body '$delimiter']          |
 3|  insert  |                                      |
 3|  insert  |Trying terminal: [/insert/i]          |
 3|  insert  |>>Matched terminal<< (return value:   |
  |          |[INSERT])                             |
 3|  insert  |                                      |
 3|  insert  |                                      |" INTO film (title, rating)
  |          |                                      |VALUES ('Veronique', 15);"
 3|  insert  |                                      |
 3|  insert  |Trying repeated subrule:              |
  |          |[statement_body]                      |
 3|  insert  |                                      |
 4|statement_|Trying rule: [statement_body]         |
 4|statement_|Trying production: [string]           |
 4|statement_|Trying subrule: [string]              |
 5|  string  |Trying rule: [string]                 |
 5|  string  |Trying production:                    |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |Trying production:                    |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |<<Didn't match rule>>                 |
 4|statement_|<<Didn't match subrule: [string]>>    |
 4|statement_|Trying production: [nonstring]        |
 4|statement_|Trying subrule: [nonstring]           |
 5|nonstring |Trying rule: [nonstring]              |
 5|nonstring |Trying production: [/[^;\'"]+/]       |
 5|nonstring |Trying terminal: [/[^;\'"]+/]         |
 5|nonstring |>>Matched terminal<< (return value:   |
  |          |[INTO film (title, rating) VALUES (]) |
 5|nonstring |                                      |
 5|nonstring |                                      |"'Veronique', 15);"
 5|nonstring |>>Matched production: [/[^;\'"]+/]<<  |
 5|nonstring |>>Matched rule<< (return value: [INTO |
  |          |film (title, rating) VALUES (])       |
 5|nonstring |                                      |
 5|nonstring |(consumed: [ INTO film (title, rating)|
  |          |VALUES (])                            |
 5|nonstring |                                      |
 4|statement_|>>Matched subrule: [nonstring]<<      |
  |          |(return value: [INTO film (title,     |
 4|statement_|rating) VALUES (]                     |
 4|statement_|>>Matched production: [nonstring]<<   |
 4|statement_|>>Matched rule<< (return value: [INTO |
  |          |film (title, rating) VALUES (])       |
 4|statement_|                                      |
 4|statement_|(consumed: [ INTO film (title, rating)|
  |          |VALUES (])                            |
 4|statement_|                                      |
 4|statement_|Trying rule: [statement_body]         |
 4|statement_|Trying production: [string]           |
 4|statement_|Trying subrule: [string]              |
 5|  string  |Trying rule: [string]                 |
 5|  string  |Trying production:                    |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |>>Matched terminal<< (return value:   |
  |          |['Veronique'])                        |
 5|  string  |                                      |
 5|  string  |                                      |", 15);"
 5|  string  |>>Matched production:                 |
  |          |[/'(\\.|''|[^\\\'])*'/]<<             |
 5|  string  |                                      |
 5|  string  |>>Matched rule<< (return value:       |
  |          |['Veronique'])                        |
 5|  string  |                                      |
 5|  string  |(consumed: ['Veronique'])             |
 4|statement_|>>Matched subrule: [string]<< (return |
  |          |value: ['Veronique']                  |
 4|statement_|                                      |
 4|statement_|>>Matched production: [string]<<      |
 4|statement_|>>Matched rule<< (return value:       |
  |          |['Veronique'])                        |
 4|statement_|                                      |
 4|statement_|(consumed: ['Veronique'])             |
 4|statement_|Trying rule: [statement_body]         |
 4|statement_|Trying production: [string]           |
 4|statement_|Trying subrule: [string]              |
 5|  string  |Trying rule: [string]                 |
 5|  string  |Trying production:                    |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |Trying production:                    |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |<<Didn't match rule>>                 |
 4|statement_|<<Didn't match subrule: [string]>>    |
 4|statement_|Trying production: [nonstring]        |
 4|statement_|Trying subrule: [nonstring]           |
 5|nonstring |Trying rule: [nonstring]              |
 5|nonstring |Trying production: [/[^;\'"]+/]       |
 5|nonstring |Trying terminal: [/[^;\'"]+/]         |
 5|nonstring |>>Matched terminal<< (return value: [,|
  |          |15)])                                 |
 5|nonstring |                                      |
 5|nonstring |                                      |";"
 5|nonstring |>>Matched production: [/[^;\'"]+/]<<  |
 5|nonstring |>>Matched rule<< (return value: [,    |
  |          |15)])                                 |
 5|nonstring |                                      |
 5|nonstring |(consumed: [, 15)])                   |
 4|statement_|>>Matched subrule: [nonstring]<<      |
  |          |(return value: [, 15)]                |
 4|statement_|                                      |
 4|statement_|>>Matched production: [nonstring]<<   |
 4|statement_|>>Matched rule<< (return value: [,    |
  |          |15)])                                 |
 4|statement_|                                      |
 4|statement_|(consumed: [, 15)])                   |
 4|statement_|Trying rule: [statement_body]         |
 4|statement_|Trying production: [string]           |
 4|statement_|Trying subrule: [string]              |
 5|  string  |Trying rule: [string]                 |
 5|  string  |Trying production:                    |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/'(\\.|''|[^\\\'])*'/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |Trying production:                    |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |Trying terminal:                      |
  |          |[/"(\\.|""|[^\\\"])*"/]               |
 5|  string  |                                      |
 5|  string  |<<Didn't match terminal>>             |
 5|  string  |<<Didn't match rule>>                 |
 4|statement_|<<Didn't match subrule: [string]>>    |
 4|statement_|Trying production: [nonstring]        |
 4|statement_|Trying subrule: [nonstring]           |
 5|nonstring |Trying rule: [nonstring]              |
 5|nonstring |Trying production: [/[^;\'"]+/]       |
 5|nonstring |Trying terminal: [/[^;\'"]+/]         |
 5|nonstring |<<Didn't match terminal>>             |
 5|nonstring |<<Didn't match rule>>                 |
 4|statement_|<<Didn't match subrule: [nonstring]>> |
 4|statement_|<<Didn't match rule>>                 |
 3|  insert  |>>Matched repeated subrule:           |
  |          |[statement_body]<< (3 times)          |
 3|  insert  |                                      |
 3|  insert  |Trying terminal: ['$delimiter']       |
 3|  insert  |>>Matched terminal<< (return value:   |
  |          |[;])                                  |
 3|  insert  |                                      |
 3|  insert  |>>Matched production: [/insert/i      |
  |          |statement_body '$delimiter']<<        |
 3|  insert  |                                      |
 3|  insert  |>>Matched rule<< (return value: [;])  |
 3|  insert  |(consumed: [])                        |
 2|statement |>>Matched subrule: [insert]<< (return |
  |          |value: [;]                            |
 2|statement |                                      |
 2|statement |>>Matched production: [insert]<<      |
 2|statement |>>Matched rule<< (return value: [;])  |
 2|statement |(consumed: [])                        |
 2|statement |Trying rule: [statement]              |
 2|statement |Trying production: [comment]          |
 2|statement |Trying subrule: [comment]             |
 3| comment  |Trying rule: [comment]                |
 3| comment  |Trying production: [/^\s*(?:#|-       |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |Trying terminal: [/^\s*(?:#|-         |
  |          |{2}).*\n/]                            |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |Trying production: [m{ / \* (?! \!)   |
  |          |.*? \* / }xs]                         |
 3| comment  |                                      |
 3| comment  |Trying terminal: [m{ / \* (?! \!) .*? |
  |          |\* / }xs]                             |
 3| comment  |                                      |
 3| comment  |<<Didn't match terminal>>             |
 3| comment  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [comment]>>   |
 2|statement |Trying production: [use]              |
 2|statement |Trying subrule: [use]                 |
 3|   use    |Trying rule: [use]                    |
 3|   use    |Trying production: [/use/i WORD       |
  |          |'$delimiter']                         |
 3|   use    |                                      |
 3|   use    |Trying terminal: [/use/i]             |
 3|   use    |<<Didn't match terminal>>             |
 3|   use    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [use]>>       |
 2|statement |Trying production: [set]              |
 2|statement |Trying subrule: [set]                 |
 3|   set    |Trying rule: [set]                    |
 3|   set    |Trying production: [/set/i            |
  |          |not_delimiter '$delimiter']           |
 3|   set    |                                      |
 3|   set    |Trying terminal: [/set/i]             |
 3|   set    |<<Didn't match terminal>>             |
 3|   set    |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [set]>>       |
 2|statement |Trying production: [drop]             |
 2|statement |Trying subrule: [drop]                |
 3|   drop   |Trying rule: [drop]                   |
 3|   drop   |Trying production: [/drop/i TABLE     |
  |          |not_delimiter '$delimiter']           |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |Trying production: [/drop/i WORD      |
  |          |'$delimiter']                         |
 3|   drop   |                                      |
 3|   drop   |Trying terminal: [/drop/i]            |
 3|   drop   |<<Didn't match terminal>>             |
 3|   drop   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [drop]>>      |
 2|statement |Trying production: [create]           |
 2|statement |Trying subrule: [create]              |
 3|  create  |Trying rule: [create]                 |
 3|  create  |Trying production: [CREATE /database/i|
  |          |WORD '$delimiter']                    |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE TEMPORARY  |
  |          |TABLE opt_if_not_exists table_name '('|
 3|  create  |<leftop: create_definition /,/        |
  |          |create_definition> /(,\s*)?\)/        |
 3|  create  |table_option '$delimiter']            |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE UNIQUE     |
  |          |/(index|key)/i index_name /on/i       |
 3|  create  |table_name '(' <leftop: field_name /,/|
  |          |field_name> ')' '$delimiter']         |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE /trigger/i |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE PROCEDURE  |
  |          |NAME not_delimiter '$delimiter']      |
 3|  create  |                                      |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |Trying production: [CREATE or_replace |
  |          |create_view_option /view/i NAME /as/i |
 3|  create  |view_select_statement '$delimiter']   |
 3|  create  |Trying subrule: [CREATE]              |
 4|  CREATE  |Trying rule: [CREATE]                 |
 4|  CREATE  |Trying production: [/create/i]        |
 4|  CREATE  |Trying terminal: [/create/i]          |
 4|  CREATE  |<<Didn't match terminal>>             |
 4|  CREATE  |<<Didn't match rule>>                 |
 3|  create  |<<Didn't match subrule: [CREATE]>>    |
 3|  create  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [create]>>    |
 2|statement |Trying production: [alter]            |
 2|statement |Trying subrule: [alter]               |
 3|  alter   |Trying rule: [alter]                  |
 3|  alter   |Trying production: [ALTER TABLE       |
  |          |table_name <leftop:                   |
 3|  alter   |alter_specification /,/               |
  |          |alter_specification> '$delimiter']    |
 3|  alter   |                                      |
 3|  alter   |Trying subrule: [ALTER]               |
 4|  ALTER   |Trying rule: [ALTER]                  |
 4|  ALTER   |Trying production: [/alter/i]         |
 4|  ALTER   |Trying terminal: [/alter/i]           |
 4|  ALTER   |<<Didn't match terminal>>             |
 4|  ALTER   |<<Didn't match rule>>                 |
 3|  alter   |<<Didn't match subrule: [ALTER]>>     |
 3|  alter   |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [alter]>>     |
 2|statement |Trying production: [insert]           |
 2|statement |Trying subrule: [insert]              |
 3|  insert  |Trying rule: [insert]                 |
 3|  insert  |Trying production: [/insert/i         |
  |          |statement_body '$delimiter']          |
 3|  insert  |                                      |
 3|  insert  |Trying terminal: [/insert/i]          |
 3|  insert  |<<Didn't match terminal>>             |
 3|  insert  |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [insert]>>    |
 2|statement |Trying production: [delimiter]        |
 2|statement |Trying subrule: [delimiter]           |
 3|delimiter |Trying rule: [delimiter]              |
 3|delimiter |Trying production: [/delimiter/i      |
  |          |/[\S]+/]                              |
 3|delimiter |                                      |
 3|delimiter |Trying terminal: [/delimiter/i]       |
 3|delimiter |<<Didn't match terminal>>             |
 3|delimiter |<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule: [delimiter]>> |
 2|statement |Trying production: [empty_statement]  |
 2|statement |Trying subrule: [empty_statement]     |
 3|empty_stat|Trying rule: [empty_statement]        |
 3|empty_stat|Trying production: ['$delimiter']     |
 3|empty_stat|Trying terminal: ['$delimiter']       |
 3|empty_stat|<<Didn't match terminal>>             |
 3|empty_stat|<<Didn't match rule>>                 |
 2|statement |<<Didn't match subrule:               |
  |          |[empty_statement]>>                   |
 2|statement |                                      |
 2|statement |Trying production: [<error...>]       |
 2|statement |Trying directive: [<error...>]        |
 2|statement |<<Didn't match directive>>            |
 2|statement |<<Didn't match rule>>                 |
 1|startrule |>>Matched repeated subrule:           |
  |          |[statement]<< (1 times)               |
 1|startrule |                                      |
 1|startrule |Trying subrule: [eofile]              |
 2|  eofile  |Trying rule: [eofile]                 |
 2|  eofile  |Trying production: [/^\Z/]            |
 2|  eofile  |Trying terminal: [/^\Z/]              |
 2|  eofile  |>>Matched terminal<< (return value:   |
  |          |[])                                   |
 2|  eofile  |                                      |
 2|  eofile  |>>Matched production: [/^\Z/]<<       |
 2|  eofile  |>>Matched rule<< (return value: [])   |
 2|  eofile  |(consumed: [])                        |
 1|startrule |>>Matched subrule: [eofile]<< (return |
  |          |value: []                             |
 1|startrule |                                      |
 1|startrule |Trying action                         |
 1|startrule |>>Matched action<< (return value:     |
  |          |[HASH(0x4c590e8)])                    |
 1|startrule |                                      |
 1|startrule |>>Matched production: [statement      |
  |          |eofile]<<                             |
 1|startrule |                                      |
 1|startrule |>>Matched rule<< (return value:       |
  |          |[HASH(0x4c590e8)])                    |
 1|startrule |                                      |
 1|startrule |(consumed: [])                        |
<--BEGIN TRANSACTION;

COMMIT;


#   Failed test 'We have one film automatically set up'
#   at t/data.t line 21.
#          got: '0'
#     expected: '1'
Can't call method "rating" on an undefined value at t/data.t line 27.
# Looks like you planned 10 tests but ran 7.
# Looks like you failed 1 test of 7 run.
# Looks like your test exited with 255 just after 7.
t/data.t .......... 
Dubious, test returned 255 (wstat 65280, 0xff00)
Failed 4/10 subtests 
t/pod-coverage.t .. skipped: Test::Pod::Coverage 1.00 required for testing POD coverage
t/pod.t ........... skipped: Test::Pod 1.00 required for testing POD

Test Summary Report
-------------------
t/data.t        (Wstat: 65280 Tests: 7 Failed: 1)
  Failed test:  5
  Non-zero exit status: 255
  Parse errors: Bad plan.  You planned 10 tests but ran 7.
Files=3, Tests=7,  3 wallclock secs ( 0.09 usr +  0.03 sys =  0.13 CPU)
Result: FAIL
Failed 1/3 test programs. 1/7 subtests failed.
dmake:  Error code 255, while making 'test_dynamic'
